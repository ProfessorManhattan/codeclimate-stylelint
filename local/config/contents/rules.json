{
  "a11y/content-property-no-static-value": "# content-property-no-static-value\n\nDisallow CSS generated content except aria-label attribute content and empty strings.\n\n**Sources:**\n\n- [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/content)\n- [tink](https://tink.uk/accessibility-support-for-css-generated-content//)\n\n",
  "a11y/font-size-is-readable": "# font-size-is-readable\n\nDisallow font sizes less than 15px (or 11.25pt).\n\n**Sources:**\n\n- [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size)\n- [Marvel](https://blog.marvelapp.com/body-text-small/)\n\n",
  "a11y/line-height-is-vertical-rhythmed": "# line-height-is-vertical-rhythmed\n\nDisallow not vertical rhythmed line-height.\n\n**Sources:**\n\n- [Zell Liew](https://zellwk.com/blog/why-vertical-rhythms/)\n\n",
  "a11y/media-prefers-color-scheme": "# media-prefers-color-scheme\n\nRequire implementation of certain styles for selectors with colors.\n\n**Sources:**\n\n- [Docs](https://drafts4.csswg.org/mediaqueries-5/#prefers-color-scheme)\n- [less mixin](https://brehaut.net/blog/2018/a_dark_mode_less_mixin)\n- [Webkit](https://trac.webkit.org/changeset/237156/webkit)\n- [Safari TP](https://webkit.org/blog/8475/release-notes-for-safari-technology-preview-68)\n- [Mojave](https://www.apple.com/lae/macos/mojave)\n\n",
  "a11y/media-prefers-reduced-motion": "# media-prefers-reduced-motion\n\nRequire certain styles if the animation or transition in media features.\n\nSafari 10.1 [introduced](https://webkit.org/blog/7551/responsive-design-for-motion/) the Reduced Motion Media Query. It is a non-vendor-prefixed declaration that allows developers to \"create styles that avoid large areas of motion for users that specify a preference for reduced motion in System Preferences.\"\n\nThe `--fix` option on the command line can automatically fix all of the problems reported by this rule.\n\n",
  "a11y/no-display-none": "# no-display-none\n\nSources that will help you do without `{ display: none; }` and hide the content:\n\n- [CSS Tricks](https://css-tricks.com/places-its-tempting-to-use-display-none-but-dont/)\n- [A11Y Project](https://a11yproject.com/posts/how-to-hide-content/)\n- [WebAIM](https://webaim.org/techniques/css/invisiblecontent/)\n\n",
  "a11y/no-obsolete-attribute": "# no-obsolete-attribute\n\nDisallow obsolete attribute using.\n\n**Sources:**\n\n- [W3G Obsolete features](https://www.w3.org/TR/html5/obsolete.html#obsolete)\n- [W3C Non-conforming features](https://w3c.github.io/html/obsolete.html#non-conforming-features)\n- [W3G Features removed](https://www.w3.org/TR/html52/changes.html#features-removed)\n\n",
  "a11y/no-obsolete-element": "# no-obsolete-element\n\nDisallow obsolete selectors using.\n\n**Sources:**\n\n- [W3G Obsolete features](https://www.w3.org/TR/html5/obsolete.html#obsolete)\n- [W3G Features removed](https://www.w3.org/TR/html52/changes.html#features-removed)\n\n",
  "a11y/no-outline-none": "# no-outline-none\n\nDisallow outline clearing.\n\nWhy? [Because](https://www.w3.org/TR/2008/REC-WCAG20-20081211/#navigation-mechanisms-focus-visible)\n\n**Sources:**\n\n- [DON'T DO IT!](http://www.outlinenone.com/)\n- [a11yproject](https://a11yproject.com/posts/never-remove-css-outlines/)\n- [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/outline)\n\n",
  "a11y/no-spread-text": "# no-spread-text\n\nRequire width of text greater than 45 characters and less than 80 characters.\n\n**Sources:**\n\n- [Ryan Mack](https://ryanmack.me/quick-measure)\n- [Manuel Matuzovic](https://medium.com/@matuzo/writing-css-with-accessibility-in-mind-8514a0007939)\n\n> Warning! This rule use some heuristics for define css node with styles for text. It may be unstable.\n\n",
  "a11y/no-text-align-justify": "# no-text-align-justify\n\nDisallow `{ text-align: justify; }` anywhere.\n\n**Sources:**\n\n- [W3C](https://www.w3.org/TR/WCAG20-TECHS/G169.html)\n- [Design for Hackers](https://designforhackers.com/blog/justify-text-html-css/)\n\n",
  "a11y/selector-pseudo-class-focus": "# selector-pseudo-class-focus\n\nChecks the presence of a pseudo-class for selectors with `:hover`.\n\n```css\na:hover,\na:focus {\n}\n```\n\nThis rule considers :focus pseudo-class selector defined in the CSS Specifications.\nThe `--fix` option on the command line can automatically fix all of the problems reported by this rule.\n\n",
  "alpha-value-notation": "# alpha-value-notation\n\nSpecify percentage or number notation for alpha-values.\n\n<!-- prettier-ignore -->\n```css\n    a { color: rgb(0 0 0 / 0.5) }\n/**                        ↑\n *                         This notation */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "at-rule-allowed-list": "# at-rule-allowed-list\n\nSpecify a list of allowed at-rules.\n\n<!-- prettier-ignore -->\n```css\n    @keyframes name {}\n/** ↑\n * At-rules like this */\n```\n\n",
  "at-rule-blacklist": "# at-rule-blacklist\n\n**_Deprecated: Instead use the [`at-rule-disallowed-list`](../at-rule-disallowed-list/README.md) rule._**\n\nSpecify a list of disallowed at-rules.\n\n<!-- prettier-ignore -->\n```css\n    @keyframes name {}\n/** ↑\n * At-rules like this */\n```\n\n",
  "at-rule-disallowed-list": "# at-rule-disallowed-list\n\nSpecify a list of disallowed at-rules.\n\n<!-- prettier-ignore -->\n```css\n    @keyframes name {}\n/** ↑\n * At-rules like this */\n```\n\n",
  "at-rule-empty-line-before": "# at-rule-empty-line-before\n\nRequire or disallow an empty line before at-rules.\n\n<!-- prettier-ignore -->\n```css\na {}\n          /* ← */\n@media {} /* ↑ */\n/**          ↑\n *   This line */\n```\n\nThis rule ignores:\n\n- at-rules that are the very first node in the source\n- `@import` in Less.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule. We recommend to enable [`indentation`](../indentation/README.md) rule for better autofixing results with this rule.\n\n",
  "at-rule-name-case": "# at-rule-name-case\n\nSpecify lowercase or uppercase for at-rules names.\n\n<!-- prettier-ignore -->\n```css\n   @media (min-width: 10px) {}\n/** ↑\n * This at-rule name */\n```\n\nOnly lowercase at-rule names are valid in SCSS.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix some of the problems reported by this rule.\n\n",
  "at-rule-name-newline-after": "# at-rule-name-newline-after\n\nRequire a newline after at-rule names.\n\n<!-- prettier-ignore -->\n```css\n    @media\n   /*↑*/  (max-width: 600px) {}\n/**  ↑\n * The newline after this at-rule name */\n```\n\n",
  "at-rule-name-space-after": "# at-rule-name-space-after\n\nRequire a single space after at-rule names.\n\n<!-- prettier-ignore -->\n```css\n@media (max-width: 600px) {}\n/**   ↑\n * The space after at-rule names */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "at-rule-no-unknown": "# at-rule-no-unknown\n\nDisallow unknown at-rules.\n\n<!-- prettier-ignore -->\n```css\n    @unknown (max-width: 960px) {}\n/** ↑\n * At-rules like this */\n```\n\nThis rule considers at-rules defined in the CSS Specifications, up to and including Editor's Drafts, to be known.\n\n",
  "at-rule-no-vendor-prefix": "# at-rule-no-vendor-prefix\n\nDisallow vendor prefixes for at-rules.\n\n<!-- prettier-ignore -->\n```css\n    @-webkit-keyframes { 0% { top: 0; } }\n/**  ↑\n * This prefix */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "at-rule-property-required-list": "# at-rule-property-required-list\n\nSpecify a list of required properties for an at-rule.\n\n<!-- prettier-ignore -->\n```css\n    @font-face { font-display: swap; font-family: 'foo'; }\n/**  ↑           ↑                   ↑\n *  At-rule and required property names */\n```\n\n",
  "at-rule-property-requirelist": "# at-rule-property-requirelist\n\n**_Deprecated: Instead use the [`at-rule-property-required-list`](../at-rule-property-required-list/README.md) rule._**\n\nSpecify a list of required properties for an at-rule.\n\n<!-- prettier-ignore -->\n```css\n    @font-face { font-display: swap; font-family: 'foo'; }\n/**  ↑           ↑                   ↑\n *  At-rule and required property names */\n```\n\n",
  "at-rule-semicolon-newline-after": "# at-rule-semicolon-newline-after\n\nRequire a newline after the semicolon of at-rules.\n\n<!-- prettier-ignore -->\n```css\n@import url(\"x.css\");\n@import url(\"y.css\");\n/**                 ↑\n * The newline after these semicolons */\n```\n\nThis rule allows an end-of-line comment followed by a newline. For example:\n\n<!-- prettier-ignore -->\n```css\n@import url(\"x.css\"); /* end-of-line comment */\n\na {}\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "at-rule-semicolon-space-before": "# at-rule-semicolon-space-before\n\nRequire a single space or disallow whitespace before the semicolons of at-rules.\n\n<!-- prettier-ignore -->\n```css\n@import \"components/buttons\";\n/**                         ↑\n * The space before this semicolon */\n```\n\n",
  "at-rule-whitelist": "# at-rule-whitelist\n\n**_Deprecated: Instead use the [`at-rule-allowed-list`](../at-rule-allowed-list/README.md) rule._**\n\nSpecify a list of allowed at-rules.\n\n<!-- prettier-ignore -->\n```css\n    @keyframes name {}\n/** ↑\n * At-rules like this */\n```\n\n",
  "block-closing-brace-empty-line-before": "# block-closing-brace-empty-line-before\n\nRequire or disallow an empty line before the closing brace of blocks.\n\n<!-- prettier-ignore -->\n```css\na {\n  color: pink;\n  /* ← */\n} /* ↑ */\n/**  ↑\n * This line */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "block-closing-brace-newline-after": "# block-closing-brace-newline-after\n\nRequire a newline or disallow whitespace after the closing brace of blocks.\n\n<!-- prettier-ignore -->\n```css\na { color: pink; }\na { color: red; }↑\n/**              ↑\n * The newline after this brace */\n```\n\nThis rule allows an end-of-line comment separated from the closing brace by spaces, as long as the comment contains no newlines. For example,\n\n<!-- prettier-ignore -->\n```css\na {\n  color: pink;\n} /* end-of-line comment */\n```\n\nThis rule allows a trailing semicolon after the closing brace of a block. For example,\n\n<!-- prettier-ignore -->\n```css\n:root {\n  --toolbar-theme: {\n    background-color: hsl(120, 70%, 95%);\n  };\n/* ↑\n * This semicolon */\n}\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "block-closing-brace-newline-before": "# block-closing-brace-newline-before\n\nRequire a newline or disallow whitespace before the closing brace of blocks.\n\n<!-- prettier-ignore -->\n```css\n    a { color: pink;\n    }\n/** ↑\n * The newline before this brace */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "block-closing-brace-space-after": "# block-closing-brace-space-after\n\nRequire a single space or disallow whitespace after the closing brace of blocks.\n\n<!-- prettier-ignore -->\n```css\na { color: pink; }\n/**              ↑\n * The space after this brace */\n```\n\nThis rule allows a trailing semicolon after the closing brace of a block. For example,\n\n<!-- prettier-ignore -->\n```css\n:root {\n  --toolbar-theme: {\n    background-color: hsl(120, 70%, 95%);\n  };\n/* ↑\n * This semicolon */\n}\n```\n\n",
  "block-closing-brace-space-before": "# block-closing-brace-space-before\n\nRequire a single space or disallow whitespace before the closing brace of blocks.\n\n<!-- prettier-ignore -->\n```css\na { color: pink; }\n/**              ↑\n * The space before this brace */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "block-no-empty": "# block-no-empty\n\nDisallow empty blocks.\n\n<!-- prettier-ignore -->\n```css\n a { }\n/** ↑\n * Blocks like this */\n```\n\n",
  "block-opening-brace-newline-after": "# block-opening-brace-newline-after\n\nRequire a newline after the opening brace of blocks.\n\n<!-- prettier-ignore -->\n```css\n  a {\n    ↑ color: pink; }\n/** ↑\n * The newline after this brace */\n```\n\nThis rule allows an end-of-line comment followed by a newline. For example,\n\n<!-- prettier-ignore -->\n```css\na { /* end-of-line comment */\n  color: pink;\n}\n```\n\nRefer to [combining rules](../../../docs/user-guide/rules/combine.md) for more information on using this rule with [`block-opening-brace-newline-before`](../block-opening-brace-newline-before/README.md) to disallow single-line rules.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "block-opening-brace-newline-before": "# block-opening-brace-newline-before\n\nRequire a newline or disallow whitespace before the opening brace of blocks.\n\n<!-- prettier-ignore -->\n```css\n  a\n    { color: pink; }\n/** ↑\n * The newline before this brace */\n```\n\nRefer to [combining rules](../../../docs/user-guide/rules/combine.md) for more information on using this rule with [`block-opening-brace-newline-after`](../block-opening-brace-newline-after/README.md) to disallow single-line rules.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "block-opening-brace-space-after": "# block-opening-brace-space-after\n\nRequire a single space or disallow whitespace after the opening brace of blocks.\n\n<!-- prettier-ignore -->\n```css\n  a { color: pink; }\n/** ↑\n * The space after this brace */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "block-opening-brace-space-before": "# block-opening-brace-space-before\n\nRequire a single space or disallow whitespace before the opening brace of blocks.\n\n<!-- prettier-ignore -->\n```css\n  a { color: pink; }\n/** ↑\n * The space before this brace */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "color-function-notation": "# color-function-notation\n\nSpecify modern or legacy notation for applicable color-functions.\n\n<!-- prettier-ignore -->\n```css\n    a { color: rgb(0 0 0 / 0.2) }\n/**            ↑\n *             This notation */\n```\n\nModern color-functions use a comma-free syntax because functions in CSS are used to group/name a syntax chunk. They should work by the same rules that CSS grammar does in general: values are optional and re-orderable when possible, space-separated, and commas are used to separate repetitions only.\n\nFor legacy reasons, `rgb()` and `hsl()` also supports an alternate syntax that separates all of its arguments with commas. Also for legacy reasons, the `rgba()` and `hsla()` functions exist using the same comma-based syntax.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix some of the problems reported by this rule when the primary option is `\"modern\"`.\n\n",
  "color-hex-case": "# color-hex-case\n\nSpecify lowercase or uppercase for hex colors.\n\n<!-- prettier-ignore -->\n```css\na { color: #fff }\n/**        ↑\n * This hex color */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "color-hex-length": "# color-hex-length\n\nSpecify short or long notation for hex colors.\n\n<!-- prettier-ignore -->\n```css\na { color: #fff }\n/**        ↑\n * This hex color */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "color-named": "# color-named\n\nRequire (where possible) or disallow named colors.\n\n<!-- prettier-ignore -->\n```css\na { color: black }\n/**        ↑\n * This named color */\n```\n\nThis rule ignores `$sass` and `@less` variable syntaxes.\n\n",
  "color-no-hex": "# color-no-hex\n\nDisallow hex colors.\n\n<!-- prettier-ignore -->\n```css\na { color: #333 }\n/**        ↑\n * This hex color */\n```\n\n",
  "color-no-invalid-hex": "# color-no-invalid-hex\n\nDisallow invalid hex colors.\n\n<!-- prettier-ignore -->\n```css\na { color: #y3 }\n/**        ↑\n * This hex color */\n```\n\nLonghand hex colors can be either 6 or 8 (with alpha channel) hexadecimal characters. And their shorthand variants are 3 and 4 characters respectively.\n\n",
  "comment-empty-line-before": "# comment-empty-line-before\n\nRequire or disallow an empty line before comments.\n\n<!-- prettier-ignore -->\n```css\na {}\n              /* ← */\n/* comment */ /* ↑ */\n/**              ↑\n*        This line */\n```\n\nThis rule ignores:\n\n- comments that are the very first node in the source\n- shared-line comments\n- single-line comments with `//` (when you're using a custom syntax that supports them)\n- comments within selector and value lists\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule. We recommend to enable [`indentation`](../indentation/README.md) rule for better autofixing results with this rule.\n\n",
  "comment-no-empty": "# comment-no-empty\n\nDisallow empty comments.\n\n<!-- prettier-ignore -->\n```css\n    /* */\n/** ↑\n * Comments like this */\n```\n\nThis rule ignores SCSS-like comments.\n\n**Caveat:** Comments within _selector and value lists_ are currently ignored.\n\n",
  "comment-pattern": "# comment-pattern\n\nSpecify a pattern for comments.\n\n<!-- prettier-ignore -->\n```css\n/*  comment */\n/** ↑\n * The pattern of this */\n```\n\n",
  "comment-whitespace-inside": "# comment-whitespace-inside\n\nRequire or disallow whitespace on the inside of comment markers.\n\n<!-- prettier-ignore -->\n```css\n    /* comment */\n/**  ↑         ↑\n * The space inside these two markers */\n```\n\nAny number of asterisks are allowed at the beginning or end of the comment. So `/** comment **/` is treated the same way as `/* comment */`.\n\n**Caveat:** Comments within _selector and value lists_ are currently ignored.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "comment-word-blacklist": "# comment-word-blacklist\n\n**_Deprecated: Instead use the [`comment-word-disallowed-list`](../comment-word-disallowed-list/README.md) rule._**\n\nSpecify a list of disallowed words within comments.\n\n<!-- prettier-ignore -->\n```css\n /* words within comments */\n/** ↑     ↑      ↑\n * These three words */\n```\n\n**Caveat:** Comments within _selector and value lists_ are currently ignored.\n\n",
  "comment-word-disallowed-list": "# comment-word-disallowed-list\n\nSpecify a list of disallowed words within comments.\n\n<!-- prettier-ignore -->\n```css\n /* words within comments */\n/** ↑     ↑      ↑\n * These three words */\n```\n\n**Caveat:** Comments within _selector and value lists_ are currently ignored.\n\n",
  "custom-media-pattern": "# custom-media-pattern\n\nSpecify a pattern for custom media query names.\n\n<!-- prettier-ignore -->\n```css\n@custom-media --foo (max-width: 30em);\n/**             ↑\n * The pattern of this */\n```\n\n",
  "custom-property-empty-line-before": "# custom-property-empty-line-before\n\nRequire or disallow an empty line before custom properties.\n\n<!-- prettier-ignore -->\n```css\na {\n  top: 10px;\n                          /* ← */\n  --foo: pink;            /* ↑ */\n}                         /* ↑ */\n/**                          ↑\n *                   This line */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule. We recommend to enable [`indentation`](../indentation/README.md) rule for better autofixing results with this rule.\n\n",
  "custom-property-pattern": "# custom-property-pattern\n\nSpecify a pattern for custom properties.\n\n<!-- prettier-ignore -->\n```css\na { --foo-: 1px; }\n/**   ↑\n * The pattern of this */\n```\n\n",
  "declaration-bang-space-after": "# declaration-bang-space-after\n\nRequire a single space or disallow whitespace after the bang of declarations.\n\n<!-- prettier-ignore -->\n```css\na { color: pink !important; }\n/**             ↑\n * The space after this exclamation mark */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "declaration-bang-space-before": "# declaration-bang-space-before\n\nRequire a single space or disallow whitespace before the bang of declarations.\n\n<!-- prettier-ignore -->\n```css\na { color: pink !important; }\n/**             ↑\n * The space before this exclamation mark */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "declaration-block-no-duplicate-properties": "# declaration-block-no-duplicate-properties\n\nDisallow duplicate properties within declaration blocks.\n\n<!-- prettier-ignore -->\n```css\na { color: pink; color: orange; }\n/** ↑            ↑\n * These duplicated properties */\n```\n\nThis rule ignores variables (`$sass`, `@less`, `--custom-property`).\n\n",
  "declaration-block-no-redundant-longhand-properties": "# declaration-block-no-redundant-longhand-properties\n\nDisallow longhand properties that can be combined into one shorthand property.\n\n<!-- prettier-ignore -->\n```css\n  a {\n    padding-top: 1px;\n    padding-right: 2px;\n    padding-bottom: 3px;\n    padding-left: 4px; }\n/** ↑\n *  These longhand properties */\n```\n\nThe longhand properties in the example above can be more concisely written as:\n\n<!-- prettier-ignore -->\n```css\na {\n  padding: 1px 2px 3px 4px;\n}\n```\n\nThis rule will only complain if you've used the longhand equivalent of _all_ the properties that the shorthand will set.\n\nThis rule complains when the following shorthand properties can be used:\n\n- `margin`\n- `padding`\n- `background`\n- `font`\n- `border`\n- `border-top`\n- `border-bottom`\n- `border-left`\n- `border-right`\n- `border-width`\n- `border-style`\n- `border-color`\n- `list-style`\n- `border-radius`\n- `transition`\n- `animation`\n- `border-block-end`\n- `border-block-start`\n- `border-image`\n- `border-inline-end`\n- `border-inline-start`\n- `column-rule`\n- `columns`\n- `flex`\n- `flex-flow`\n- `grid`\n- `grid-area`\n- `grid-column`\n- `grid-gap`\n- `grid-row`\n- `grid-template`\n- `outline`\n- `text-decoration`\n- `text-emphasis`\n- `mask`\n\n**Please note** that properties are considered to be redundant if they may be written shorthand according to the specification, **regardless of the behavior of any individual browser**. For example, due to Internet Explorer's implementation of Flexbox, [it may not be possible to use the shorthand property `flex`](https://github.com/philipwalton/flexbugs#flexbug-8), but the longhand form is still considered a violation.\n\nFlexbox-related properties can be ignored using `ignoreShorthands: [\"/flex/\"]` (see below).\n\n",
  "declaration-block-no-shorthand-property-overrides": "# declaration-block-no-shorthand-property-overrides\n\nDisallow shorthand properties that override related longhand properties.\n\n<!-- prettier-ignore -->\n```css\na { background-repeat: repeat; background: green; }\n/**                            ↑\n * This overrides the longhand property before it */\n```\n\nIn almost every case, this is just an authorial oversight. For more about this behavior, see [MDN's documentation of shorthand properties](https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties).\n\n",
  "declaration-block-semicolon-newline-after": "# declaration-block-semicolon-newline-after\n\nRequire a newline or disallow whitespace after the semicolons of declaration blocks.\n\n<!-- prettier-ignore -->\n```css\na {\n  color: pink;\n  top: 0;    ↑\n}            ↑\n/**          ↑\n * The newline after this semicolon */\n```\n\nThis rule ignores:\n\n- semicolons that are preceded by Less mixins\n- the last semicolon of declaration blocks\n\nUse the `block-closing-brace-*-before` rules to control the whitespace between the last semicolon and the closing brace instead.\n\nThis rule allows an end-of-line comment followed by a newline. For example,\n\n<!-- prettier-ignore -->\n```css\na {\n  color: pink; /* end-of-line comment */\n  top: 0;\n}\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "declaration-block-semicolon-newline-before": "# declaration-block-semicolon-newline-before\n\nRequire a newline or disallow whitespace before the semicolons of declaration blocks.\n\n<!-- prettier-ignore -->\n```css\n  a {\n    color: pink\n    ; top: 0;\n  } ↑\n/** ↑\n * The newline before this semicolon */\n```\n\nThis rule ignores semicolons that are preceded by Less mixins.\n\n",
  "declaration-block-semicolon-space-after": "# declaration-block-semicolon-space-after\n\nRequire a single space or disallow whitespace after the semicolons of declaration blocks.\n\n<!-- prettier-ignore -->\n```css\na { color: pink; top: 0; }\n/**            ↑\n * The space after this semicolon */\n```\n\nThis rule ignores:\n\n- semicolons that are preceded by Less mixins\n- the last semicolon of declaration blocks\n\nUse the `block-closing-brace-*-before` rules to control the whitespace between the last semicolon and the closing brace instead.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "declaration-block-semicolon-space-before": "# declaration-block-semicolon-space-before\n\nRequire a single space or disallow whitespace before the semicolons of declaration blocks.\n\n<!-- prettier-ignore -->\n```css\na { color: pink; }\n/**            ↑\n * The space before this semicolon */\n```\n\nThis rule ignores semicolons that are preceded by Less mixins.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "declaration-block-single-line-max-declarations": "# declaration-block-single-line-max-declarations\n\nLimit the number of declarations within a single-line declaration block.\n\n<!-- prettier-ignore -->\n```css\na { color: pink; top: 0; }\n/** ↑            ↑\n * The number of these declarations */\n```\n\n",
  "declaration-block-trailing-semicolon": "# declaration-block-trailing-semicolon\n\nRequire or disallow a trailing semicolon within declaration blocks.\n\n<!-- prettier-ignore -->\n```css\na { background: orange; color: pink; }\n/**                                ↑\n *                    This semicolon */\n```\n\nThe trailing semicolon is the _last_ semicolon in a declaration block and it is optional.\n\nThis rule ignores:\n\n- Less mixins\n- trailing `//` comments\n- declaration blocks containing nested (at-)rules\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "declaration-colon-newline-after": "# declaration-colon-newline-after\n\nRequire a newline or disallow whitespace after the colon of declarations.\n\n<!-- prettier-ignore -->\n```css\na {\n  box-shadow:\n    0 0 0 1px #5b9dd9,\n    0 0 2px 1px rgba(30, 140, 190, 0.8);\n}        /* ↑ */\n/**         ↑\n * The newline after this colon */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "declaration-colon-space-after": "# declaration-colon-space-after\n\nRequire a single space or disallow whitespace after the colon of declarations.\n\n<!-- prettier-ignore -->\n```css\na { color: pink }\n/**      ↑\n * The space after this colon */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "declaration-colon-space-before": "# declaration-colon-space-before\n\nRequire a single space or disallow whitespace before the colon of declarations.\n\n<!-- prettier-ignore -->\n```css\na { color :pink }\n/**       ↑\n * The space before this colon */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "declaration-empty-line-before": "# declaration-empty-line-before\n\nRequire or disallow an empty line before declarations.\n\n<!-- prettier-ignore -->\n```css\na {\n  --foo: pink;\n             /* ← */\n  top: 15px; /* ↑ */\n}            /* ↑ */\n/**             ↑\n *      This line */\n```\n\nThis rule only applies to standard property declarations. Use the [`custom-property-empty-line-before`](../custom-property-empty-line-before/README.md) rule for custom property declarations.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule. We recommend to enable [`indentation`](../indentation/README.md) rule for better autofixing results with this rule.\n\n",
  "declaration-no-important": "# declaration-no-important\n\nDisallow `!important` within declarations.\n\n<!-- prettier-ignore -->\n```css\na { color: pink !important; }\n/**             ↑\n * This !important */\n```\n\nIf you always want `!important` in your declarations, e.g. if you're writing [user styles](https://userstyles.org/), you can _safely_ add them using [`postcss-safe-important`](https://github.com/crimx/postcss-safe-important).\n\n",
  "declaration-property-unit-allowed-list": "# declaration-property-unit-allowed-list\n\nSpecify a list of allowed property and unit pairs within declarations.\n\n<!-- prettier-ignore -->\n```css\na { width: 100px; }\n/** ↑         ↑\n * These properties and these units */\n```\n\n",
  "declaration-property-unit-blacklist": "# declaration-property-unit-blacklist\n\n**_Deprecated: Instead use the [`declaration-property-unit-disallowed-list`](../declaration-property-unit-disallowed-list/README.md) rule._**\n\nSpecify a list of disallowed property and unit pairs within declarations.\n\n<!-- prettier-ignore -->\n```css\na { width: 100px; }\n/** ↑         ↑\n * These properties and these units */\n```\n\n",
  "declaration-property-unit-disallowed-list": "# declaration-property-unit-disallowed-list\n\nSpecify a list of disallowed property and unit pairs within declarations.\n\n<!-- prettier-ignore -->\n```css\na { width: 100px; }\n/** ↑         ↑\n * These properties and these units */\n```\n\n",
  "declaration-property-unit-whitelist": "# declaration-property-unit-whitelist\n\n**_Deprecated: Instead use the [`declaration-property-unit-allowed-list`](../declaration-property-unit-allowed-list/README.md) rule._**\n\nSpecify a list of allowed property and unit pairs within declarations.\n\n<!-- prettier-ignore -->\n```css\na { width: 100px; }\n/** ↑         ↑\n * These properties and these units */\n```\n\n",
  "declaration-property-value-allowed-list": "# declaration-property-value-allowed-list\n\nSpecify a list of allowed property and value pairs within declarations.\n\n<!-- prettier-ignore -->\n```css\na { text-transform: uppercase; }\n/** ↑               ↑\n * These properties and these values */\n```\n\n",
  "declaration-property-value-blacklist": "# declaration-property-value-blacklist\n\n**_Deprecated: Instead use the [`declaration-property-value-disallowed-list`](../declaration-property-value-disallowed-list/README.md) rule._**\n\nSpecify a list of disallowed property and value pairs within declarations.\n\n<!-- prettier-ignore -->\n```css\na { text-transform: uppercase; }\n/** ↑               ↑\n * These properties and these values */\n```\n\n",
  "declaration-property-value-disallowed-list": "# declaration-property-value-disallowed-list\n\nSpecify a list of disallowed property and value pairs within declarations.\n\n<!-- prettier-ignore -->\n```css\na { text-transform: uppercase; }\n/** ↑               ↑\n * These properties and these values */\n```\n\n",
  "declaration-property-value-whitelist": "# declaration-property-value-whitelist\n\n**_Deprecated: Instead use the [`declaration-property-value-allowed-list`](../declaration-property-value-allowed-list/README.md) rule._**\n\nSpecify a list of allowed property and value pairs within declarations.\n\n<!-- prettier-ignore -->\n```css\na { text-transform: uppercase; }\n/** ↑               ↑\n * These properties and these values */\n```\n\n",
  "font-family-name-quotes": "# font-family-name-quotes\n\nSpecify whether or not quotation marks should be used around font family names.\n\n<!-- prettier-ignore -->\n```css\na { font-family: \"Times New Roman\", 'Ancient Runes', serif; }\n/**              ↑               ↑  ↑             ↑\n *               These quotation marks and this one */\n```\n\nThis rule checks the `font` and `font-family` properties.\n\nThis rule ignores `$sass`, `@less`, and `var(--custom-property)` variable syntaxes.\n\n",
  "font-family-no-duplicate-names": "# font-family-no-duplicate-names\n\nDisallow duplicate font family names.\n\n<!-- prettier-ignore -->\n```css\na { font-family: serif, serif; }\n/**              ↑      ↑\n * These font family names */\n```\n\nThis rule checks the `font` and `font-family` properties.\n\nThis rule ignores `$sass`, `@less`, and `var(--custom-property)` variable syntaxes.\n\n**Caveat:** This rule will stumble on _unquoted_ multi-word font names and _unquoted_ font names containing escape sequences. Wrap these font names in quotation marks, and everything should be fine.\n\n",
  "font-family-no-missing-generic-family-keyword": "# font-family-no-missing-generic-family-keyword\n\nDisallow missing generic families in lists of font family names.\n\n<!-- prettier-ignore -->\n```css\na { font-family: Arial, sans-serif; }\n/**                     ↑\n * An example of generic family name */\n```\n\nThe generic font family can be:\n\n- placed anywhere in the font family list\n- omitted if a keyword related to property inheritance or a system font is used\n\nThis rule checks the `font` and `font-family` properties.\n\n",
  "font-weight-notation": "# font-weight-notation\n\nRequire numeric or named (where possible) `font-weight` values. Also, when named values are expected, require only valid names.\n\n<!-- prettier-ignore -->\n```css\na { font-weight: bold }\n/**              ↑\n *   This notation */\n\na { font: italic small-caps 600 16px/3 cursive; }\n/**                         ↑\n*      And this notation, too */\n```\n\nValid font-weight names are `normal`, `bold`, `bolder`, and `lighter`.\n\nThis rule ignores `$sass`, `@less`, and `var(--custom-property)` variable syntaxes.\n\n",
  "function-allowed-list": "# function-allowed-list\n\nSpecify a list of allowed functions.\n\n<!-- prettier-ignore -->\n```css\na { transform: scale(1); }\n/**            ↑\n * This function */\n```\n\n",
  "function-blacklist": "# function-blacklist\n\n**_Deprecated: Instead use the [`function-disallowed-list`](../function-disallowed-list/README.md) rule._**\n\nSpecify a list of disallowed functions.\n\n<!-- prettier-ignore -->\n```css\na { transform: scale(1); }\n/**            ↑\n * This function */\n```\n\n",
  "order/order": "# order\n\nSpecify the order of content within declaration blocks.\n\n* Options\n\t* [Extended at-rule objects](#extended-at-rule-objects)\n\t* [Extended rule objects](#extended-rule-objects)\n* Optional secondary options\n\t* [`unspecified`](#unspecified)\n\t* [`disableFix`](#disablefix)\n* [Autofixing caveats](#autofixing-caveats)\n* [Examples](#examples)\n\n",
  "order/properties-alphabetical-order": "# properties-alphabetical-order\n\nSpecify the alphabetical order of properties within declaration blocks.\n\n```css\na {\n\tcolor: pink;\n\ttop: 0;\n}\n/** ↑\n * These properties */\n```\n\nShorthand properties *must always* precede their longhand counterparts, even if that means they are not alphabetized.\n(See also [`declaration-block-no-shorthand-property-overrides`](https://stylelint.io/user-guide/rules/declaration-block-no-shorthand-property-overrides/).)\n\nPrefixed properties *must always* precede the unprefixed version.\n\nThis rule ignores variables (`$sass`, `@less`, `--custom-property`).\n\n",
  "order/properties-order": "# properties-order\n\nSpecify the order of properties within declaration blocks.\n\n```css\na {\n\tcolor: pink;\n\ttop: 0;\n}\n/** ↑\n * These properties */\n```\n\nPrefixed properties *must always* precede the unprefixed version.\n\nThis rule ignores variables (`$sass`, `@less`, `--custom-property`).\n\n* Options\n* Optional secondary options\n\t* [`unspecified`](#unspecified)\n\t* [`emptyLineBeforeUnspecified`](#emptyLineBeforeUnspecified)\n\t* [`emptyLineMinimumPropertyThreshold`](#emptylineminimumpropertythreshold)\n\t* [`disableFix`](#disablefix)\n* [Autofixing caveats](#autofixing-caveats)\n\n",
  "scss/at-each-key-value-single-line": "# at-each-key-value-single-line\n\nThis is a rule that checks for situations where users have:\n\n- Done a loop using map-keys\n- Grabbed the value for that key inside of the loop.\n\n```scss\n$font-weights: (\n  \"regular\": 400,\n  \"medium\": 500,\n  \"bold\": 700\n);\n@each $key in map-keys($font-weights) {\n  $value: map-get($font-weights, $key);\n  /**        ↑\n   * This call should be consolidated into the @each call.\n   **/\n}\n```\n\n",
  "scss/at-else-closing-brace-newline-after": "# at-else-closing-brace-newline-after\n\nRequire or disallow a newline after the closing brace of `@else` statements.\n\n```scss\n@if (@a == 0) {\n\n} @else if (@a == 1){ }\n@else { }             ↑\n/**     ↑             ↑\n * The newline after these braces */\n```\n\nThe `--fix` option on the [command line](https://github.com/stylelint/stylelint/blob/master/docs/user-guide/cli.md#autofixing-errors) can automatically fix all of the problems reported by this rule.\n\nThis rule might have conflicts with stylelint's core rule [`block-closing-brace-newline-after`](https://stylelint.io/user-guide/rules/block-closing-brace-newline-after) if it doesn't have `\"ignoreAtRules\": [\"else\"]` in a `.stylelintrc` config file.  That's because an `@else { ... }` statement can be successfully parsed as an at-rule with a block. You might also want to set `\"ignoreAtRules\": [\"else\"]` for another stylelint's core rule - [`at-rule-empty-line-before`](https://stylelint.io/user-guide/rules/at-rule-empty-line-before) that could be forcing empty lines before at-rules (including `@else`s that follow `@if`s or other `@else`s).\n\nThis rule doesn't have usual `\"always\"` and `\"never\"` main option values, because if you don't need special behavior for `@if` and `@else` you could just use [`block-closing-brace-newline-after`](https://stylelint.io/user-guide/rules/block-closing-brace-newline-after) set to `\"always\"` or any other value.\n\n",
  "scss/at-else-closing-brace-space-after": "# at-else-closing-brace-space-after\n\nRequire a single space or disallow whitespace after the closing brace of `@else` statements.\n\n```scss\n@if ($a == 0) { }\n@else if ($x == 2) { }\n                     ↑\n/**                  ↑\n * The space after this brace */\n```\n\nThe `--fix` option on the [command line](https://github.com/stylelint/stylelint/blob/master/docs/user-guide/cli.md#autofixing-errors) can automatically fix all of the problems reported by this rule.\n\nThis rule might have conflicts with stylelint's core [`block-closing-brace-space-after`](https://stylelint.io/user-guide/rules/block-closing-brace-space-after) rule if the latter is set up in your `.stylelintrc` config file.\n\n",
  "scss/at-else-empty-line-before": "# at-else-empty-line-before\n\nRequire an empty line or disallow empty lines before `@`-else.\n\n```scss\n@if ($a == 0) { }\n                      /* ← */\n@else if ($x == 2) { }   ↑\n                         ↑\n/**                      ↑\n * This empty line */\n```\n\nThe `--fix` option on the [command line](https://github.com/stylelint/stylelint/blob/master/docs/user-guide/cli.md#autofixing-errors) can automatically fix all of the problems reported by this rule.\n\n`@if` and `@else` statements might need to have different behavior than all the other at-rules. For that you might need to set `\"ignoreAtRules\": [\"else\"]` for stylelint's core rule [`at-rule-empty-line-before`](https://stylelint.io/user-guide/rules/at-rule-empty-line-before). But that would make you unable to disallow empty lines before `@else` while forcing it to be on a new line. This rule is designed to solve exactly that.\n\n",
  "scss/at-else-if-parentheses-space-before": "# at-else-if-parentheses-space-before\n\nRequire or disallow a space before `@else if` parentheses.\n\n```scss\n@else if ($condition) { }\n/**      ↑\n * The space before this parenthesis */\n```\n\nThe `--fix` option on the [command line](https://github.com/stylelint/stylelint/blob/master/docs/user-guide/cli.md#autofixing-errors) can automatically fix all of the problems reported by this rule.\n\n",
  "scss/at-extend-no-missing-placeholder": "# at-extend-no-missing-placeholder\n\nDisallow at-extends (`@extend`) with missing placeholders.\n\nUsing a class selector with the `@extend` directive usually results in more generated CSS than when using a placeholder selector. Furthermore, Sass specifically introduced placeholder selectors in order to be used with `@extend`.\n\nSee [Mastering Sass extends and placeholders](http://8gramgorilla.com/mastering-sass-extends-and-placeholders/).\n\n```scss\n.foo {\n  @extend %bar\n//        ↑\n// This is a placeholder selector\n}\n```",
  "scss/at-function-named-arguments": "# at-function-named-arguments\n\nRequire named parameters in SCSS function call rule.\n\n```scss\nanimation: animation($duration: 250ms) {\n//                   ↑\n// Require or disallow this\n```\n\n",
  "scss/at-function-parentheses-space-before": "# at-function-parentheses-space-before\n\nRequire or disallow a space before `@function` parentheses.\n\n```scss\n@function foo ($arg) { }\n/**           ↑\n * The space before this parenthesis */\n```\n\nThe `--fix` option on the [command line](https://github.com/stylelint/stylelint/blob/master/docs/user-guide/cli.md#autofixing-errors) can automatically fix all of the problems reported by this rule.\n\n",
  "scss/at-function-pattern": "# at-function-pattern\n\nSpecify a pattern for Sass/SCSS-like function names.\n\n```scss\n@function grid-width($n) {\n/**       ↑\n * The pattern of this */\n```\n\n",
  "scss/at-if-closing-brace-newline-after": "# at-if-closing-brace-newline-after\n\nRequire or disallow a newline after the closing brace of `@if` statements.\n\n```scss\n@if ($a == 0) { }\n                ↑\n/**             ↑\n * The newline after this brace */\n```\n\nThe `--fix` option on the [command line](https://github.com/stylelint/stylelint/blob/master/docs/user-guide/cli.md#autofixing-errors) can automatically fix all of the problems reported by this rule.\n\nThis rule might have conflicts with stylelint's core rule [`block-closing-brace-newline-after`](https://stylelint.io/user-guide/rules/block-closing-brace-newline-after) if it doesn't have `\"ignoreAtRules\": [\"if\"]` in a `.stylelintrc` config file. That's because an `@if { ... }` statement can be successfully parsed as an at-rule with a block. You might also want to set `\"ignoreAtRules\": [\"else\"]` for another stylelint's core rule - [`at-rule-empty-line-before`](https://stylelint.io/user-guide/rules/at-rule-empty-line-before) that could be forcing empty lines before at-rules (including `@else`s that follow `@if`s or other `@else`s).\n\nThis rule doesn't have usual `\"always\"` and `\"never\"` main option values, because if you don't need special behavior for `@if` and `@else` you could just use [`block-closing-brace-newline-after`](https://stylelint.io/user-guide/rules/block-closing-brace-newline-after) set to `\"always\"` or any other value.\n\n",
  "scss/at-if-closing-brace-space-after": "# at-if-closing-brace-space-after\n\nRequire a single space or disallow whitespace after the closing brace of `@if` statements.\n\n```scss\n@if ($a == 0) { }\n                ↑\n/**             ↑\n * The space after this brace */\n```\n\nThe `--fix` option on the [command line](https://github.com/stylelint/stylelint/blob/master/docs/user-guide/cli.md#autofixing-errors) can automatically fix all of the problems reported by this rule.\n\nThis rule might have conflicts with stylelint's core [`block-closing-brace-space-after`](https://stylelint.io/user-guide/rules/block-closing-brace-space-after) rule if the latter is set up in your `.stylelintrc` config file.\n\n",
  "scss/at-if-no-null": "# at-if-no-null\n\nCheck for equality to null is unnecessarily explicit since `null` is falsey in Sass.\n\n```scss\na {\n    @if $x == null {}\n/**         ↑     ↑\n * == or != null is unncessary */\n}\n```\n\n",
  "scss/at-import-no-partial-leading-underscore": "# at-import-no-partial-leading-underscore\n\nDisallow leading underscore in partial names in `@import`.\n\n```scss\n@import \"path/to/_file\"\n/**              ↑\n *   Disallow this */\n```",
  "scss/at-import-partial-extension": "# at-import-partial-extension\n\nRequire or disallow extension in `@import` commands.\n\n```scss\n@import \"file.scss\";\n/**           ↑\n * This extension */\n```\n\nThe rule ignores [cases](https://sass-lang.com/documentation/at-rules/import) when Sass considers an `@import` command just a plain CSS import:\n\n- If the file’s extension is `.css`.\n- If the filename begins with `http://` (or any other protocol).\n- If the filename is a `url()`.\n- If the `@import` has any media queries.\n\n",
  "scss/at-import-partial-extension-blacklist": "# at-import-partial-extension-blacklist\n\nSpecify blacklist of disallowed file extensions for partial names in `@import` commands.\n\n```scss\n@import \"file.scss\"\n/**           ↑\n * Blacklist of these */\n```\n\nThe rule ignores [cases](https://sass-lang.com/documentation/at-rules/import) when Sass considers an `@import` command just a plain CSS import:\n\n* If the file’s extension is `.css`.\n* If the filename begins with `http://` (or any other protocol).\n* If the filename is a `url()`.\n* If the `@import` has any media queries.\n\n",
  "scss/at-import-partial-extension-whitelist": "# at-import-partial-extension-whitelist\n\nSpecify whitelist of allowed file extensions for partial names in `@import` commands.\n\n```scss\n@import \"file.scss\"\n/**           ↑\n * Whitelist of these */\n```\n\nThe rule ignores [cases](https://sass-lang.com/documentation/at-rules/import) when Sass considers an `@import` command just a plain CSS import:\n\n* If the file’s extension is `.css`.\n* If the filename begins with `http://` (or any other protocol).\n* If the filename is a `url()`.\n* If the `@import` has any media queries.\n\n",
  "scss/at-mixin-argumentless-call-parentheses": "# at-mixin-argumentless-call-parentheses\n\nRequire or disallow parentheses in argumentless `@mixin` calls.\n\n```scss\n@include mixin-name() {\n/**                ↑\n *                 Such mixin calls */\n```\n\nThe `--fix` option on the [command line](https://github.com/stylelint/stylelint/blob/master/docs/user-guide/cli.md#autofixing-errors) can automatically fix all of the problems reported by this rule.\n\n",
  "scss/at-mixin-named-arguments": "# at-mixin-named-arguments\n\nRequire named parameters in at-mixin call rule.\n\n```scss\n@include animation($duration: 250ms) {\n//                 ↑\n// Require or disallow this\n```\n\n",
  "scss/at-mixin-parentheses-space-before": "# at-mixin-parentheses-space-before\n\nRequire or disallow a space before `@mixin` parentheses.\n\n```scss\n@mixin foo ($arg) { }\n/**        ↑\n * The space before this parenthesis */\n```\n\nThe `--fix` option on the [command line](https://github.com/stylelint/stylelint/blob/master/docs/user-guide/cli.md#autofixing-errors) can automatically fix all of the problems reported by this rule.\n\n",
  "scss/at-mixin-pattern": "# at-mixin-pattern\n\nSpecify a pattern for Sass/SCSS-like mixin names.\n\n```scss\n@mixin complex-object ($items: 10) {\n/**    ↑\n * The pattern of this */\n```\n\n",
  "scss/at-rule-conditional-no-parentheses": "# at-rule-conditional-no-parentheses\n\nDisallow parentheses in conditional @ rules (if, elsif, while)\n\n```css\n    @if (true) {}\n/**     ↑    ↑\n * Get rid of parentheses like this. */\n```\n\nThe `--fix` option on the [command line](https://github.com/stylelint/stylelint/blob/master/docs/user-guide/cli.md#autofixing-errors) can automatically fix all of the problems reported by this rule.\n\n",
  "scss/at-rule-no-unknown": "# at-rule-no-unknown\n\nDisallow unknown at-rules. Should be used **instead of** stylelint's [at-rule-no-unknown](https://stylelint.io/user-guide/rules/at-rule-no-unknown).\n\n```css\n    @unknown (max-width: 960px) {}\n/** ↑\n * At-rules like this */\n```\n\nThis rule is basically a wrapper around the mentioned core rule, but with added SCSS-specific `@`-directives. So if you use the core rule, `@if`, `@extend` and other Sass-y things will get warnings. You must disable stylelint's core rule to make this rule work:\n\n```json\n{\n  \"rules\": {\n    \"at-rule-no-unknown\": null,\n    \"scss/at-rule-no-unknown\": true\n  }\n}\n```\n\n",
  "scss/comment-no-empty": "# comment-no-empty\n\nDisallow empty comments.\n\n<!-- prettier-ignore -->\n```scss\n    /* */\n    //\n```\n\n",
  "scss/comment-no-loud": "# comment-no-loud\n\nDisallow `/*`-comments.\n\n```scss\n/*  Comment */\n//  ↑     ↑\n// This line\n```\n\nThis rule only works on CSS comments (`/* */`) and ignores all double-slash (`//`) comments.\n\n",
  "scss/declaration-nested-properties": "# declaration-nested-properties\n\nRequire or disallow properties with `-` in their names to be in a form of a nested group.\n\n```scss\n/* This is properties nesting: */  \nfont: {\n  size: 16px;\n  weight: 700;\n}\n```\n\n[Sass official docs on nested properties](https://sass-lang.com/documentation/style-rules/declarations#nesting).\n\n",
  "scss/declaration-nested-properties-no-divided-groups": "# declaration-nested-properties-no-divided-groups\n\nDisallow nested properties of the same \"namespace\" be divided into multiple groups.\n\n```scss\n/* Such groups: */\nfont: { /* `font` is a \"namespace\" */\n  size: 16px;\n  weight: 700;\n}\n```",
  "scss/dimension-no-non-numeric-values": "# dimension-no-non-numeric-values\n\nInterpolating a value with a unit (e.g. `#{$value}px`) results in a\n_string_ value, not as numeric value. This value then cannot be used in\nnumerical operations.  It is better to use arithmetic to apply a unit to a\nnumber (e.g. `$value * 1px`).\n\nThis rule requires that all interpolation for values should be in the format `$value * 1<unit>` instead of `#{value}<unit>`\n\n```scss\n$value: 4;\n\np {\n  padding: #{value}px;\n//         ↑         ↑\n//  should be $value * 1px\n}\n```\n\n",
  "scss/dollar-variable-colon-newline-after": "# dollar-variable-colon-newline-after\n\nRequire a newline after the colon in `$`-variable declarations.\n\n```scss\n$box-shadow:\n  0 0 0 1px #5b9dd9,\n  0 0 2px 1px rgba(30, 140, 190, 0.8);\n        /* ↑ */\n/**        ↑\n * The newline after this colon */\n```\n\nThe `--fix` option on the [command line](https://github.com/stylelint/stylelint/blob/master/docs/user-guide/cli.md#autofixing-errors) can automatically fix all of the problems reported by this rule.\n\n",
  "scss/dollar-variable-colon-space-after": "# dollar-variable-colon-space-after\n\nRequire or disallow whitespace after the colon in `$`-variable declarations.\n\n```scss\n$variable: 10px;\n/**      ↑\n * The space after this colon */\n```\n\nThe `--fix` option on the [command line](https://github.com/stylelint/stylelint/blob/master/docs/user-guide/cli.md#autofixing-errors) can automatically fix all of the problems reported by this rule.\n\n",
  "scss/dollar-variable-colon-space-before": "# dollar-variable-colon-space-before\n\nRequire a single space or disallow whitespace before the colon in `$`-variable declarations.\n\n```scss\n$variable: 10px;\n/**      ↑\n * The space before this colon */\n```\n\nThe `--fix` option on the [command line](https://github.com/stylelint/stylelint/blob/master/docs/user-guide/cli.md#autofixing-errors) can automatically fix all of the problems reported by this rule.\n\n",
  "scss/dollar-variable-default": "# dollar-variable-default\n\nRequire `!default` flag for `$`-variable declarations\n\n```scss\n$variable: 10px !default;\n/**             ↑\n * This is variable with default value */\n```",
  "scss/dollar-variable-empty-line-after": "# dollar-variable-empty-line-after\n\nRequire an empty line or disallow empty lines after `$`-variable declarations.\n\nIf the `$`-variable declaration is the last declaration in a file, it's ignored.\n\nThe `--fix` option on the [command line](https://github.com/stylelint/stylelint/blob/master/docs/user-guide/cli.md#autofixing-errors) can automatically fix all of the problems reported by this rule.\n\n",
  "scss/dollar-variable-empty-line-before": "# dollar-variable-empty-line-before\n\nRequire an empty line or disallow empty lines before `$`-variable declarations.\n\nIf the `$`-variable declaration is the first declaration in a file, it's ignored.\n\n```scss\n             /* ← */\n$width: 10px;   ↑\n/**             ↑\n * This empty line */\n```\n\nThe `--fix` option on the [command line](https://github.com/stylelint/stylelint/blob/master/docs/user-guide/cli.md#autofixing-errors) can automatically fix all of the problems reported by this rule.\n\n",
  "scss/dollar-variable-first-in-block": "# dollar-variable-first-in-block\n\nRequire `$`-variable declarations to be placed first in a block (root or a rule).\n\n",
  "scss/dollar-variable-no-missing-interpolation": "# dollar-variable-no-missing-interpolation\n\nDisallow Sass variables that are used without interpolation with CSS features that use custom identifiers.\n\n```scss\n.class {\n  $var: \"my-anim\";\n  animation-name: $var;\n//                ↑\n// This variable needs to be interpolated\n// because its value is a string\n}\n```",
  "scss/dollar-variable-pattern": "# dollar-variable-pattern\n\nSpecify a pattern for Sass-like variables.\n\n```scss\na { $foo: 1px; }\n/** ↑\n * The pattern of this */\n```\n\n",
  "scss/double-slash-comment-empty-line-before": "# double-slash-comment-empty-line-before\n\nRequire or disallow an empty line before `//`-comments.\n\n```scss\na {}\n           /* ← */\n// comment /* ↑ */\n/**           ↑\n*     This line */\n```\n\nThe `--fix` option on the [command line](https://github.com/stylelint/stylelint/blob/master/docs/user-guide/cli.md#autofixing-errors) can automatically fix all of the problems reported by this rule.\n\nThis rule only works with SCSS-like [single-line comments](https://sass-lang.com/documentation/syntax/comments) and ignores:\n* comments that are the very first nodes in a file;\n* CSS comments (`/* */`);\n* comments that are on the same line as some non-comment code (inline comments).\n\n",
  "scss/double-slash-comment-inline": "# double-slash-comment-inline\n\nRequire or disallow `//`-comments to be inline comments.\n\n```scss\na {\n  width: 10px; // inline-comment\n/*             ↑\n * Such comments */\n```\n\nAn inline comment in terms of this rule is a comment that is placed on the same line with any other code, either before or after it.\n\nThis rule only works with SCSS-like [single-line comments](https://sass-lang.com/documentation/syntax/comments) and ignores CSS comments (`/* */`).\n\n",
  "scss/double-slash-comment-whitespace-inside": "# double-slash-comment-whitespace-inside\n\nRequire or disallow whitespace after the `//` in `//`-comments\n\n```scss\na {\n  width: 10px; // inline-comment\n/*               ↑\n * Such whitespace */\n```\n\nThis rule only works with SCSS-like [single-line comments](https://sass-lang.com/documentation/syntax/comments) and ignores CSS comments (`/* */`).\n\nAny number of slases are allowed at the beginning of the comment. So `/// comment` is treated the same way as `// comment`.\n\nNote that a newline is not possible as a whitespace in terms of this rule as `//`-comments are intended to be single-line.\n\n",
  "scss/function-color-relative": "# function-color-relative\n\nEncourage the use of the [scale-color](https://sass-lang.com/documentation/modules/color#scale-color) over:\n\n* [darken](https://sass-lang.com/documentation/modules/color#darken)\n* [desaturate](https://sass-lang.com/documentation/modules/color#desaturate)\n* [fade-in](https://sass-lang.com/documentation/modules/color#fade-in)\n* [fade-out](https://sass-lang.com/documentation/modules/color#fade-out)\n* [lighten](https://sass-lang.com/documentation/modules/color#lighten)\n* [opacify](https://sass-lang.com/documentation/modules/color#opacify)\n* [saturate](https://sass-lang.com/documentation/modules/color#saturate)\n* [transparentize](https://sass-lang.com/documentation/modules/color#transparentize)\n\n```scss\np {\n   color: saturate(blue, 20%);\n  /**     ↑      ↑\n   * This function should be scale-color\n   */\n}\n```\n\n",
  "scss/function-quote-no-quoted-strings-inside": "# function-quote-no-quoted-strings-inside\n\nDisallow quoted strings inside the [quote function](https://sass-lang.com/documentation/modules/string#quote)\n\n```scss\np {\n  font-family: quote(\"Helvetica\");\n  /**                ↑         ↑\n   * These quotes are unnecessary\n   */\n}\n```\n\n",
  "scss/function-unquote-no-unquoted-strings-inside": "# function-unquote-no-unquoted-strings-inside\n\nDisallow unquoted strings inside the [unquote function](https://sass-lang.com/documentation/modules/string#unquote)\n\n```scss\np {\n  font-family: unquote(Helvetica);\n  /**          ↑     ↑\n   * This function call is unnecessary\n   */\n}\n```\n\n",
  "scss/map-keys-quotes": "# map-keys-quotes\n\nRequire quoted keys in Sass maps.\n\n```scss\n$test: (Helvetica: 14px, Arial: 25px);\n  /**   ↑                ↑\n   * These words should be quoted.\n   */\n```\n\n",
  "scss/media-feature-value-dollar-variable": "# media-feature-value-dollar-variable\n\nRequire a media feature value be a `$`-variable or disallow `$`-variables in media feature values.\n\n```scss\n@media (max-width: $var) { a { color: red; } }\n//                 ↑\n// Require or disallow this\n}\n```\n\n",
  "scss/no-dollar-variables": "# no-dollar-variables\n\nDisallow dollar variables within a stylesheet.\n\n```scss\n    $a: 1;\n/** ↑\n * These dollar variables */\n```\n\n",
  "scss/no-duplicate-dollar-variables": "# no-duplicate-dollar-variables\n\nDisallow duplicate dollar variables within a stylesheet.\n\n```scss\n$a: 1;\n$a: 2;\n/** ↑\n * These are duplicates */\n```\n\nA dollar variable is considered a duplicate if it shadows a variable of the same name (see the [Sass documentation](https://sass-lang.com/documentation/variables#shadowing)). Two dollar variables are not duplicates if their scopes are unrelated.\n\n```scss\n.one {\n  $a: 1;\n  /** ↑\n   * Not a duplicate */\n}\n.two {\n  $a: 2;\n  /** ↑\n   * Not a duplicate */\n}\n```\n\n",
  "scss/no-duplicate-mixins": "# no-duplicate-mixins\n\nDisallow duplicate mixins within a stylesheet.\n\n```scss\n@mixin font-size-default {\n  font-size: 16px;\n}\n@mixin font-size-default {\n  font-size: 18px;\n}\n/** ↑\n * These are duplicates */\n```\n\n",
  "scss/no-global-function-names": "# no-global-function-names\n\nDisallows the use of global function names, as these global functions are now located inside built-in Sass modules.\n\nA full list of disallowed names (and their alternatives) is located [here](https://github.com/sass/sass/blob/master/accepted/module-system.md#built-in-modules-1)\n\nIt is recommended to use the [Sass migrator](https://sass-lang.com/documentation/cli/migrator) to change these global function names automatically.\n\n```scss\n@use \"sass:color\";\na {\n    background: color.adjust(#6b717f, $red: 15);\n}\n```",
  "scss/operator-no-newline-after": "# operator-no-newline-after\n\nDisallow linebreaks after Sass operators.\n\n```scss\na { width: 10px + $n; }\n/**             ↑\n * Linebreaks after this */\n```",
  "scss/operator-no-newline-before": "# operator-no-newline-before\n\nDisallow linebreaks before Sass operators.\n\n```scss\na { width: 10px\n    + $n; }\n/** ↑\n * Linebreaks before this */\n```",
  "scss/operator-no-unspaced": "# operator-no-unspaced\n\nDisallow unspaced operators in Sass operations.\n\n```scss\na { width: 10px*$n; }\n/**            ↑\n * The space around this operator */\n```",
  "scss/partial-no-import": "# partial-no-import\n\nDisallow non-CSS `@import`s in partial files.\n\n```scss\n// path/to/_file.scss:\n/*         ↑ in partial files */\n\n  @import \"path/to/file.scss\"\n/*↑ Disallow imports */\n```",
  "scss/percent-placeholder-pattern": "# percent-placeholder-pattern\n\nSpecify a pattern for `%`-placeholders.\n\n```scss\n    %foobar { display: flex; }\n/** ↑\n * The pattern of this */\n```\n\n",
  "scss/selector-nest-combinators": "# selector-nest-combinators\n\nRequire or disallow nesting of combinators in selectors\n\n```scss\n/* Examples of selectors without nesting of combinators */\n.foo .bar {}\n\n.foo.bar {}\n\n.foo > .bar {}\n\n.foo:hover {}\n\n/* Corresponding selectors with combinators nested */\n.foo {\n  .bar {}\n}\n\n.foo {\n  &.bar {}\n}\n\n.foo {\n  & > .bar {}\n}\n\n.foo {\n  &:hover {}\n}\n```\n\n",
  "scss/selector-no-redundant-nesting-selector": "# selector-no-redundant-nesting-selector\n\nDisallow redundant nesting selectors (`&`).\n\n```scss\np {\n  & a {}\n//↑\n// This type of selector\n}\n```\n\nThe following patterns are considered warnings:\n\n```scss\np {\n  & a {}\n}\n```\n\n```scss\np {\n  & > a {}\n}\n```\n\n```scss\np {\n  & .class {}\n}\n```\n\n```scss\np {\n  & + .foo {}\n}\n```\n\nThe following patterns are *not* considered warnings:\n\n```scss\np {\n  &.foo {}\n}\n```\n\n```scss\np {\n  .foo > & {}\n}\n```\n\n```scss\np {\n  &,\n  .foo,\n  .bar {\n    margin: 0;\n  }\n}\n```\n\n",
  "scss/selector-no-union-class-name": "# selector-no-union-class-name\n\nDisallow union class names with the parent selector (`&`).\n\n```scss\n.class {\n  &-union {\n//↑\n// This type usage of `&`\n  }\n}\n```",
  "function-calc-no-invalid": "# function-calc-no-invalid\n\nDisallow an invalid expression within `calc` functions.\n\n<!-- prettier-ignore -->\n```css\n.foo {width: calc();}\n/**               ↑\n * empty expression */\n.foo {width: calc(100% 80px);}\n/**                   ↑\n/* missing operator */\n.foo {width: calc(100% -80px);}\n/**                   ↑\n/* missing operator */\n.foo {width: calc(100% - - 80px);}\n/**                      ↑\n/* unexpected operator */\n.foo {width: calc(100% -);}\n/**                    ↑\n/* unexpected operator */\n.foo {width: calc(- 100%);}\n/**               ↑\n/* unexpected operator */\n.foo {width: calc(100% / 0);}\n/**                    ↑ ↑\n/* division by zero */\n.foo {width: calc(100px + 80);}\n/**                  ↑  ↑  ↑\n/* the `resolved type` is invalid */\n.foo {width: calc(100% + 80);}\n/**                  ↑ ↑  ↑\n/* the `resolved type` is invalid */\n.foo {width: calc(100px - 80);}\n/**                  ↑  ↑  ↑\n/* the `resolved type` is invalid */\n.foo {width: calc(100px * 80px);}\n/**                  ↑  ↑   ↑\n/* the `resolved type` is invalid */\n.foo {width: calc(100 / 80%);}\n/**                 ↑ ↑   ↑\n/* the `resolved type` is invalid */\n```\n\n- `calc()` must have an expression.\n- `calc()` must have an operator between the arguments.\n- `calc()` must not be division by zero.\n- [The resolved type](https://www.w3.org/TR/css-values-3/#calc-type-checking) must be valid for where the expression is placed.\n\n",
  "function-calc-no-unspaced-operator": "# function-calc-no-unspaced-operator\n\nDisallow an unspaced operator within `calc` functions.\n\n<!-- prettier-ignore -->\n```css\na { top: calc(1px + 2px); }\n/**               ↑\n * The space around this operator */\n```\n\nBefore the operator, there must be a single whitespace or a newline plus indentation. After the operator, there must be a single whitespace or a newline.\n\n",
  "function-comma-newline-after": "# function-comma-newline-after\n\nRequire a newline or disallow whitespace after the commas of functions.\n\n<!-- prettier-ignore -->\n```css\na { transform: translate(1,\n  1) }                 /* ↑ */\n/**                       ↑\n *             These commas */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "function-comma-newline-before": "# function-comma-newline-before\n\nRequire a newline or disallow whitespace before the commas of functions.\n\n<!-- prettier-ignore -->\n```css\n  a { transform: translate(1\n    , 1) }\n/** ↑\n * This comma */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "function-comma-space-after": "# function-comma-space-after\n\nRequire a single space or disallow whitespace after the commas of functions.\n\n<!-- prettier-ignore -->\n```css\na { transform: translate(1, 1) }\n/**                       ↑\n * The space after this comma */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "function-comma-space-before": "# function-comma-space-before\n\nRequire a single space or disallow whitespace before the commas of functions.\n\n<!-- prettier-ignore -->\n```css\na { transform: translate(1 ,1) }\n/**                        ↑\n * The space before this comma */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "function-disallowed-list": "# function-disallowed-list\n\nSpecify a list of disallowed functions.\n\n<!-- prettier-ignore -->\n```css\na { transform: scale(1); }\n/**            ↑\n * This function */\n```\n\n",
  "function-linear-gradient-no-nonstandard-direction": "# function-linear-gradient-no-nonstandard-direction\n\nDisallow direction values in `linear-gradient()` calls that are not valid according to the\n[standard syntax](https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient#Syntax).\n\n<!-- prettier-ignore -->\n```css\n.foo { background: linear-gradient(to top, #fff, #000); }\n/**                                ↑\n * This (optional) first argument is the \"direction\" */\n```\n\nA valid and standard direction value is one of the following:\n\n- an angle\n- `to` plus a side-or-corner (`to top`, `to bottom`, `to left`, `to right`; `to top right`, `to right top`, `to bottom left`, etc.)\n\nA common mistake (matching outdated non-standard syntax) is to use just a side-or-corner without the preceding `to`.\n\n",
  "function-max-empty-lines": "# function-max-empty-lines\n\nLimit the number of adjacent empty lines within functions.\n\n<!-- prettier-ignore -->\n```css\na {\n  transform:\n    translate(\n                /* ← */\n      1,        /* ↑ */\n                /* ← */\n      1         /* ↑ */\n                /* ← */\n    );          /* ↑ */\n}               /* ↑ */\n/**                ↑\n *            These lines */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "function-name-case": "# function-name-case\n\nSpecify lowercase or uppercase for function names.\n\n<!-- prettier-ignore -->\n```css\na { width: calc(5% - 10em); }\n/**        ↑\n * This function */\n```\n\nCamel case function names, e.g. `translateX`, are accounted for when the `lower` option is used.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "function-parentheses-newline-inside": "# function-parentheses-newline-inside\n\nRequire a newline or disallow whitespace on the inside of the parentheses of functions.\n\n<!-- prettier-ignore -->\n```css\n  a {\n    transform: translate(\n      1,             /* ↑ */\n      1              /* ↑ */\n    );               /* ↑ */\n  }                  /* ↑ */\n/** ↑                   ↑\n * The newline inside these two parentheses */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "function-parentheses-space-inside": "# function-parentheses-space-inside\n\nRequire a single space or disallow whitespace on the inside of the parentheses of functions.\n\n<!-- prettier-ignore -->\n```css\na { transform: translate( 1, 1 ); }\n/**                     ↑      ↑\n * The space inside these two parentheses */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "function-url-no-scheme-relative": "# function-url-no-scheme-relative\n\nDisallow scheme-relative urls.\n\n<!-- prettier-ignore -->\n```css\na { background-image: url('//www.google.com/file.jpg'); }\n/**                        ↑\n *  This scheme-relative url */\n```\n\nA [scheme-relative url](https://url.spec.whatwg.org/#syntax-url-scheme-relative) is a url that begins with `//` followed by a host.\n\nThis rule ignores url arguments that are variables (`$sass`, `@less`, `--custom-property`).\n\n",
  "function-url-quotes": "# function-url-quotes\n\nRequire or disallow quotes for urls.\n\n<!-- prettier-ignore -->\n```css\na { background: url(\"x.jpg\") }\n/**                 ↑     ↑\n *             These quotes */\n```\n\n",
  "function-url-scheme-allowed-list": "# function-url-scheme-allowed-list\n\nSpecify a list of allowed URL schemes.\n\n<!-- prettier-ignore -->\n```css\na { background-image: url('http://www.example.com/file.jpg'); }\n/**                        ↑\n *           This URL scheme */\n```\n\nA [URL scheme](https://url.spec.whatwg.org/#syntax-url-scheme) consists of alphanumeric, `+`, `-`, and `.` characters. It can appear at the start of a URL and is followed by `:`.\n\nThis rule ignores:\n\n- URL arguments without an existing URL scheme\n- URL arguments with variables or variable interpolation (`$sass`, `@less`, `--custom-property`, `#{$var}`, `@{var}`, `$(var)`)\n\n",
  "function-url-scheme-blacklist": "# function-url-scheme-blacklist\n\n**_Deprecated: Instead use the [`function-url-scheme-disallowed-list`](../function-url-scheme-disallowed-list/README.md) rule._**\n\nSpecify a list of disallowed URL schemes.\n\n<!-- prettier-ignore -->\n```css\na { background-image: url('http://www.example.com/file.jpg'); }\n/**                        ↑\n *           This URL scheme */\n```\n\nA [URL scheme](https://url.spec.whatwg.org/#syntax-url-scheme) consists of alphanumeric, `+`, `-`, and `.` characters. It can appear at the start of a URL and is followed by `:`.\n\nThis rule ignores:\n\n- URL arguments without an existing URL scheme\n- URL arguments with variables or variable interpolation (`$sass`, `@less`, `--custom-property`, `#{$var}`, `@{var}`, `$(var)`)\n\n",
  "function-url-scheme-disallowed-list": "# function-url-scheme-disallowed-list\n\nSpecify a list of disallowed URL schemes.\n\n<!-- prettier-ignore -->\n```css\na { background-image: url('http://www.example.com/file.jpg'); }\n/**                        ↑\n *           This URL scheme */\n```\n\nA [URL scheme](https://url.spec.whatwg.org/#syntax-url-scheme) consists of alphanumeric, `+`, `-`, and `.` characters. It can appear at the start of a URL and is followed by `:`.\n\nThis rule ignores:\n\n- URL arguments without an existing URL scheme\n- URL arguments with variables or variable interpolation (`$sass`, `@less`, `--custom-property`, `#{$var}`, `@{var}`, `$(var)`)\n\n",
  "function-url-scheme-whitelist": "# function-url-scheme-whitelist\n\n**_Deprecated: Instead use the [`function-url-scheme-allowed-list`](../function-url-scheme-allowed-list/README.md) rule._**\n\nSpecify a list of allowed URL schemes.\n\n<!-- prettier-ignore -->\n```css\na { background-image: url('http://www.example.com/file.jpg'); }\n/**                        ↑\n *           This URL scheme */\n```\n\nA [URL scheme](https://url.spec.whatwg.org/#syntax-url-scheme) consists of alphanumeric, `+`, `-`, and `.` characters. It can appear at the start of a URL and is followed by `:`.\n\nThis rule ignores:\n\n- URL arguments without an existing URL scheme\n- URL arguments with variables or variable interpolation (`$sass`, `@less`, `--custom-property`, `#{$var}`, `@{var}`, `$(var)`)\n\n",
  "function-whitelist": "# function-whitelist\n\n**_Deprecated: Instead use the [`function-allowed-list`](../function-allowed-list/README.md) rule._**\n\nSpecify a list of allowed functions.\n\n<!-- prettier-ignore -->\n```css\na { transform: scale(1); }\n/**            ↑\n * This function */\n```\n\n",
  "function-whitespace-after": "# function-whitespace-after\n\nRequire or disallow whitespace after functions.\n\n<!-- prettier-ignore -->\n```css\na { transform: translate(1, 1) scale(3); }\n/**                           ↑\n *                   This space */\n```\n\nThis rule does not check for space immediately after `)` if the very next character is `,`, `)`, `/` or `}`, allowing some of the patterns exemplified below.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "hue-degree-notation": "# hue-degree-notation\n\nSpecify number or angle notation for degree hues.\n\n<!-- prettier-ignore -->\n```css\n    a { color: hsl(198deg 28% 50%) }\n/**                ↑\n *                 This notation */\n```\n\nBecause hues are so often given in degrees, a hue can also be given as a number, which is interpreted as a number of degrees.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "indentation": "# indentation\n\nSpecify indentation.\n\n<!-- prettier-ignore -->\n```css\n   |@media print {\n   |  a {\n   | ↑  background-position: top left,\n   | ↑ ↑  top right;\n   | ↑}↑ ↑\n   |}↑ ↑ ↑\n/**  ↑ ↑ ↑\n * The indentation at these three points */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "keyframe-declaration-no-important": "# keyframe-declaration-no-important\n\nDisallow `!important` within keyframe declarations.\n\n<!-- prettier-ignore -->\n```css\n@keyframes important2 {\n  from { margin: 10px }\n  to { margin: 20px !important }\n}                /* ↑ */\n/**                 ↑\n*     This !important */\n```\n\nUsing `!important` within keyframes declarations is completely ignored in some browsers:\n[MDN - !important in a keyframe](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes#!important_in_a_keyframe)\n\n",
  "keyframes-name-pattern": "# keyframes-name-pattern\n\nSpecify a pattern for keyframe names.\n\n<!-- prettier-ignore -->\n```css\n@keyframes slide-right {}\n/**             ↑\n * The pattern of this */\n```\n\n",
  "length-zero-no-unit": "# length-zero-no-unit\n\nDisallow units for zero lengths.\n\n<!-- prettier-ignore -->\n```css\na { top: 0px; }\n/**      ↑↑\n * This zero and this type of length unit */\n```\n\n_Lengths_ refer to distance measurements. A length is a _dimension_, which is a _number_ immediately followed by a _unit identifier_. However, for zero lengths the unit identifier is optional. The length units are: `em`, `ex`, `ch`, `vw`, `vh`, `cm`, `mm`, `in`, `pt`, `pc`, `px`, `rem`, `vmin`, and `vmax`.\n\nThis rule ignores lengths within math functions (e.g. `calc`) in favor of the [`function-calc-no-invalid`](../function-calc-no-invalid/README.md) rule.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "linebreaks": "# linebreaks\n\nSpecify unix or windows linebreaks.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "max-empty-lines": "# max-empty-lines\n\nLimit the number of adjacent empty lines.\n\n<!-- prettier-ignore -->\n```css\na {}\n     /* ← */\n     /* ← */\na {} /* ↑ */\n/**     ↑\n * These lines */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "max-line-length": "# max-line-length\n\nLimit the length of a line.\n\n<!-- prettier-ignore -->\n```css\na { color: red }\n/**            ↑\n *       The end */\n```\n\nLines that exceed the maximum length but contain no whitespace (other than at the beginning of the line) are ignored.\n\nWhen evaluating the line length, the arguments of any `url(...)` functions are excluded from the calculation, because typically you have no control over the length of these arguments. This means that long `url()` functions should not contribute to violations.\n\n",
  "max-nesting-depth": "# max-nesting-depth\n\nLimit the depth of nesting.\n\n<!-- prettier-ignore -->\n```css\na { & > b { top: 0; } }\n/** ↑\n * This nesting */\n```\n\nThis rule works by checking rules' and at-rules' actual \"nesting depth\" against your specified max. Here's how nesting depths works:\n\n<!-- prettier-ignore -->\n```css\na {\n  & b { /* nesting depth 1 */\n    & .foo { /* nesting depth 2 */\n      @media print { /* nesting depth 3 */\n        & .baz { /* nesting depth 4 */\n          color: pink;\n        }\n      }\n    }\n  }\n}\n```\n\nNote that **root-level at-rules will _not_ be included in the nesting depth calculation**, because most users would take for granted that root-level at-rules are \"free\" (because necessary). So both of the following `.foo` rules have a nesting depth of 2, and will therefore pass if your `max` is less than or equal to 2:\n\n<!-- prettier-ignore -->\n```css\na {\n  b { /* 1 */\n    .foo {} /* 2 */\n  }\n}\n\n@media print { /* ignored */\n  a {\n    b { /* 1 */\n      .foo {} /* 2 */\n    }\n  }\n}\n```\n\nThis rule integrates into stylelint's core the functionality of the (now deprecated) plugin [`stylelint-statement-max-nesting-depth`](https://github.com/davidtheclark/stylelint-statement-max-nesting-depth).\n\n",
  "media-feature-colon-space-after": "# media-feature-colon-space-after\n\nRequire a single space or disallow whitespace after the colon in media features.\n\n<!-- prettier-ignore -->\n```css\n@media (max-width: 600px) {}\n/**              ↑\n * The space after this colon */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "media-feature-colon-space-before": "# media-feature-colon-space-before\n\nRequire a single space or disallow whitespace before the colon in media features.\n\n<!-- prettier-ignore -->\n```css\n@media (max-width :600px) {}\n/**               ↑\n * The space before this colon */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "media-feature-name-allowed-list": "# media-feature-name-allowed-list\n\nSpecify a list of allowed media feature names.\n\n<!-- prettier-ignore -->\n```css\n@media (min-width: 700px) {}\n/**     ↑\n * This media feature name */\n```\n\n",
  "media-feature-name-blacklist": "# media-feature-name-blacklist\n\n**_Deprecated: Instead use the [`media-feature-name-disallowed-list`](../media-feature-name-disallowed-list/README.md) rule._**\n\nSpecify a list of disallowed media feature names.\n\n<!-- prettier-ignore -->\n```css\n@media (min-width: 700px) {}\n/**     ↑\n * This media feature name */\n```\n\n",
  "media-feature-name-case": "# media-feature-name-case\n\nSpecify lowercase or uppercase for media feature names.\n\n<!-- prettier-ignore -->\n```css\n@media (min-width: 700px) {}\n/**     ↑\n * This media feature name */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "media-feature-name-disallowed-list": "# media-feature-name-disallowed-list\n\nSpecify a list of disallowed media feature names.\n\n<!-- prettier-ignore -->\n```css\n@media (min-width: 700px) {}\n/**     ↑\n * This media feature name */\n```\n\n",
  "media-feature-name-no-unknown": "# media-feature-name-no-unknown\n\nDisallow unknown media feature names.\n\n<!-- prettier-ignore -->\n```css\n@media (min-width: 700px) {}\n/**     ↑\n * This media feature name */\n```\n\nThis rule considers media feature names defined in the CSS Specifications, up to and including Editor's Drafts, to be known.\n\nThis rule ignores vendor-prefixed media feature names.\n\n",
  "media-feature-name-no-vendor-prefix": "# media-feature-name-no-vendor-prefix\n\nDisallow vendor prefixes for media feature names.\n\n<!-- prettier-ignore -->\n```css\n@media (-webkit-min-device-pixel-ratio: 1) {}\n/**      ↑\n * This prefixe */\n```\n\nRight now this rule simply checks for prefixed _resolutions_.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "media-feature-name-value-allowed-list": "# media-feature-name-value-allowed-list\n\nSpecify a list of allowed media feature name and value pairs.\n\n<!-- prettier-ignore -->\n```css\n@media screen and (min-width: 768px) {}\n/**                ↑          ↑\n *    These features and values */\n```\n\n",
  "media-feature-name-value-whitelist": "# media-feature-name-value-whitelist\n\n**_Deprecated: Instead use the [`media-feature-name-value-allowed-list`](../media-feature-name-value-allowed-list/README.md) rule._**\n\nSpecify a list of allowed media feature name and value pairs.\n\n<!-- prettier-ignore -->\n```css\n@media screen and (min-width: 768px) {}\n/**                ↑          ↑\n *    These features and values */\n```\n\n",
  "media-feature-name-whitelist": "# media-feature-name-whitelist\n\n**_Deprecated: Instead use the [`media-feature-name-allowed-list`](../media-feature-name-allowed-list/README.md) rule._**\n\nSpecify a list of allowed media feature names.\n\n<!-- prettier-ignore -->\n```css\n@media (min-width: 700px) {}\n/**     ↑\n * This media feature name */\n```\n\n",
  "media-feature-parentheses-space-inside": "# media-feature-parentheses-space-inside\n\nRequire a single space or disallow whitespace on the inside of the parentheses within media features.\n\n<!-- prettier-ignore -->\n```css\n@media ( max-width: 300px ) {}\n/**    ↑                  ↑\n * The space inside these two parentheses */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "media-feature-range-operator-space-after": "# media-feature-range-operator-space-after\n\nRequire a single space or disallow whitespace after the range operator in media features.\n\n<!-- prettier-ignore -->\n```css\n@media (width >= 600px) {}\n/**           ↑\n * The space after this operator */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "media-feature-range-operator-space-before": "# media-feature-range-operator-space-before\n\nRequire a single space or disallow whitespace before the range operator in media features.\n\n<!-- prettier-ignore -->\n```css\n@media (width >= 600px) {}\n/**           ↑\n * The space before this operator */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "media-query-list-comma-newline-after": "# media-query-list-comma-newline-after\n\nRequire a newline or disallow whitespace after the commas of media query lists.\n\n<!-- prettier-ignore -->\n```css\n@media screen and (color),\n  projection {}       /* ↑ */\n/**                      ↑\n *            These commas */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "media-query-list-comma-newline-before": "# media-query-list-comma-newline-before\n\nRequire a newline or disallow whitespace before the commas of media query lists.\n\n<!-- prettier-ignore -->\n```css\n    @media screen and (color)\n    , projection and (color) {}\n/** ↑\n * This comma */\n```\n\n",
  "media-query-list-comma-space-after": "# media-query-list-comma-space-after\n\nRequire a single space or disallow whitespace after the commas of media query lists.\n\n<!-- prettier-ignore -->\n```css\n@media screen and (color), projection and (color) {}\n/**                      ↑\n * The space after this comma */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "media-query-list-comma-space-before": "# media-query-list-comma-space-before\n\nRequire a single space or disallow whitespace before the commas of media query lists.\n\n<!-- prettier-ignore -->\n```css\n@media screen and (color) ,projection and (color) {}\n/**                       ↑\n * The space before this comma */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "no-descending-specificity": "# no-descending-specificity\n\nDisallow selectors of lower specificity from coming after overriding selectors of higher specificity.\n\n<!-- prettier-ignore -->\n```css\n    #container a { top: 10px; } a { top: 0; }\n/** ↑                           ↑\n * The order of these selectors represents descending specificity */\n```\n\nSource order is important in CSS, and when two selectors have the _same_ specificity, the one that occurs _last_ will take priority. However, the situation is different when one of the selectors has a _higher_ specificity. In that case, source order does _not_ matter: the selector with higher specificity will win out even if it comes first.\n\nThe clashes of these two mechanisms for prioritization, source order and specificity, can cause some confusion when reading stylesheets. If a selector with higher specificity comes _before_ the selector it overrides, we have to think harder to understand it, because it violates the source order expectation. **Stylesheets are most legible when overriding selectors always come _after_ the selectors they override.** That way both mechanisms, source order and specificity, work together nicely.\n\nThis rule enforces that practice _as best it can_, reporting fewer errors than it should. It cannot catch every _actual_ overriding selector, but it can catch certain common mistakes.\n\n## How it works\n\n**This rule looks at the last _compound selector_ in every full selector, and then compares it with other selectors in the stylesheet that end in the same way.**\n\nSo `.foo .bar` (whose last compound selector is `.bar`) will be compared to `.bar` and `#baz .bar`, but not to `#baz .foo` or `.bar .foo`.\n\nAnd `a > li#wag.pit` (whose last compound selector is `li#wag.pit`) will be compared to `div li#wag.pit` and `a > b > li + li#wag.pit`, but not to `li` or `li #wag`, etc.\n\nSelectors targeting pseudo-elements are not considered comparable to similar selectors without the pseudo-element, because they target other elements on the rendered page. For example, `a::before {}` will not be compared to `a:hover {}`, because `a::before` targets a pseudo-element whereas `a:hover` targets the actual `<a>`.\n\nThis rule only compares rules that are within the same media context. So `a {} @media print { #baz a {} }` is fine.\n\nThis rule resolves nested selectors before calculating the specificity of the selectors.\n\n## DOM Limitations\n\nThe linter can only check the CSS to check for specificity order. It does not have access to the HTML or DOM in order to interpret the use of the CSS.\n\nThis can lead to valid linting errors appearing to be invalid at first glance.\n\nFor example the following will cause an error:\n\n<!-- prettier-ignore -->\n```css\n.component1 a {}\n.component1 a:hover {}\n.component2 a {}\n```\n\nThis is a correct error because the `a:hover` on line 2 has a higher specificity than the `a` on line 3.\n\nThis may lead to confusion because \"the two selectors will never match the same `a` in the DOM\". However, since the linter does not have access to the DOM it can not evaluate this, and therefore correctly reports the error about descending specificity.\n\nIt may be possible to restructure your CSS to remove the error, otherwise it is recommended that you disable the rule for that line and leave a comment saying why the error should be ignored. Note that disabling the rule will cause additional valid errors from being reported.\n\n",
  "no-duplicate-at-import-rules": "# no-duplicate-at-import-rules\n\nDisallow duplicate `@import` rules within a stylesheet.\n\n<!-- prettier-ignore -->\n```css\n    @import \"a.css\";\n    @import \"a.css\";\n/** ↑\n * These are duplicates */\n```\n\n",
  "no-duplicate-selectors": "# no-duplicate-selectors\n\nDisallow duplicate selectors within a stylesheet.\n\n<!-- prettier-ignore -->\n```css\n    .foo {} .bar {} .foo {}\n/** ↑              ↑\n * These duplicates */\n```\n\nThis rule checks for two types of duplication:\n\n- Duplication of a single selector with a rule's selector list, e.g. `a, b, a {}`.\n- Duplication of a selector list within a stylesheet, e.g. `a, b {} a, b {}`. Duplicates are found even if the selectors come in different orders or have different spacing, e.g. `a d, b > c {} b>c, a d {}`.\n\nThe same selector _is_ allowed to repeat in the following circumstances:\n\n- It is used in different selector lists, e.g. `a {} a, b {}`.\n- The duplicates are determined to originate in different stylesheets, e.g. you have concatenated or compiled files in a way that produces sourcemaps for PostCSS to read, e.g. postcss-import.\n- The duplicates are in rules with different parent nodes, e.g. inside and outside of a media query.\n\nThis rule resolves nested selectors. So `a b {} a { & b {} }` counts as a violation, because the resolved selectors end up with a duplicate.\n\n",
  "no-empty-first-line": "# no-empty-first-line\n\nDisallow empty first lines.\n\n<!-- prettier-ignore -->\n```css\n    \\n\n    /** ↑\n     * This newline */\n    a { color: pink; }\n```\n\nThis rule ignores empty sources. Use the [`no-empty-source`](../no-empty-source/README.md) rule to disallow these.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "no-empty-source": "# no-empty-source\n\nDisallow empty sources.\n\n<!-- prettier-ignore -->\n```css\n  ···\\n\\t\n/**     ↑\n *  This empty source */\n```\n\nA source containing only whitespace is considered empty.\n\n",
  "no-eol-whitespace": "# no-eol-whitespace\n\nDisallow end-of-line whitespace.\n\n<!-- prettier-ignore -->\n```css\na { color: pink; }···\n/**               ↑\n *  This whitespace */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix most of the problems reported by this rule.\n\n",
  "no-extra-semicolons": "# no-extra-semicolons\n\nDisallow extra semicolons.\n\n<!-- prettier-ignore -->\n```css\na { color: pink;; }\n/**             ↑\n *  This semicolons */\n```\n\nThis rule ignores semicolons after Less mixins.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "no-invalid-double-slash-comments": "# no-invalid-double-slash-comments\n\nDisallow double-slash comments (`//...`) which are not supported by CSS and [could lead to unexpected results](https://stackoverflow.com/a/20192639/130652).\n\n<!-- prettier-ignore -->\n```css\na {\n  //color: pink;\n}\n/** ↑\n *  This comment */\n```\n\nIf you are using a preprocessor that allows `//` single-line comments (e.g. Sass, Less, Stylus), this rule will not complain about those. They are compiled into standard CSS comments by your preprocessor, so stylelint will consider them valid. This rule only complains about the lesser-known method of using `//` to \"comment out\" a single-line of code in regular CSS. (If you didn't know this was possible, have a look at [\"Single Line Comments (//) in CSS\"](http://www.xanthir.com/b4U10)).\n\n",
  "no-missing-end-of-source-newline": "# no-missing-end-of-source-newline\n\nDisallow missing end-of-source newlines.\n\n<!-- prettier-ignore -->\n```css\n    a { color: pink; }\n    \\n\n/** ↑\n * This newline */\n```\n\nCompletely empty files are not considered violations.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "no-unknown-animations": "# no-unknown-animations\n\nDisallow unknown animations.\n\n<!-- prettier-ignore -->\n```css\na { animation-name: fancy-slide; }\n/**                    ↑\n *   This animation name */\n\na { animation: fancy-slide 2s linear; }\n/**                    ↑\n *           And this one */\n```\n\nThis rule considers the identifiers of `@keyframes` rules defined within the same source to be known.\n\n",
  "number-leading-zero": "# number-leading-zero\n\nRequire or disallow a leading zero for fractional numbers less than 1.\n\n<!-- prettier-ignore -->\n```css\na { line-height: 0.5; }\n/**              ↑\n * This leading zero */\n```\n\nThis rule ignores mixin parameters in Less.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "number-max-precision": "# number-max-precision\n\nLimit the number of decimal places allowed in numbers.\n\n<!-- prettier-ignore -->\n```css\na { top: 3.245634px; }\n/**           ↑\n * This decimal place */\n```\n\n",
  "number-no-trailing-zeros": "# number-no-trailing-zeros\n\nDisallow trailing zeros in numbers.\n\n<!-- prettier-ignore -->\n```css\na { top: 0.5000px; bottom: 1.0px; }\n/**         ↑                ↑\n *        These trailing zeros */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix some of the problems reported by this rule.\n\n",
  "property-allowed-list": "# property-allowed-list\n\nSpecify a list of allowed properties.\n\n<!-- prettier-ignore -->\n```css\na { display: block; }\n/** ↑\n * This property */\n```\n\nThis rule ignores variables (`$sass`, `@less`, `--custom-property`).\n\n",
  "property-blacklist": "# property-blacklist\n\n**_Deprecated: Instead use the [`property-disallowed-list`](../property-disallowed-list/README.md) rule._**\n\nSpecify a list of disallowed properties.\n\n<!-- prettier-ignore -->\n```css\na { text-rendering: optimizeLegibility; }\n/** ↑\n * This property */\n```\n\n",
  "property-case": "# property-case\n\nSpecify lowercase or uppercase for properties.\n\n<!-- prettier-ignore -->\n```css\n    a { width: 1px; }\n/**     ↑\n * This property */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "property-disallowed-list": "# property-disallowed-list\n\nSpecify a list of disallowed properties.\n\n<!-- prettier-ignore -->\n```css\na { text-rendering: optimizeLegibility; }\n/** ↑\n * This property */\n```\n\n",
  "property-no-unknown": "# property-no-unknown\n\nDisallow unknown properties.\n\n<!-- prettier-ignore -->\n```css\na { heigth: 100%; }\n/** ↑\n * This property */\n```\n\nThis rule considers properties defined in the [CSS Specifications and browser specific properties](https://github.com/betit/known-css-properties#source) to be known.\n\nThis rule ignores:\n\n- variables (`$sass`, `@less`, `--custom-property`)\n- vendor-prefixed properties (e.g., `-moz-align-self`, `-webkit-align-self`)\n\nUse option `checkPrefixed` described below to turn on checking of vendor-prefixed properties.\n\n",
  "property-no-vendor-prefix": "# property-no-vendor-prefix\n\nDisallow vendor prefixes for properties.\n\n<!-- prettier-ignore -->\n```css\na { -webkit-transform: scale(1); }\n/**  ↑\n * This prefix */\n```\n\nThis rule does not blanketly condemn vendor prefixes. Instead, it uses [Autoprefixer's](https://github.com/postcss/autoprefixer) up-to-date data (from [caniuse.com](http://caniuse.com/)) to know whether a vendor prefix should cause a violation or not. _If you've included a vendor prefixed property that has a standard alternative, one that Autoprefixer could take care of for you, this rule will complain about it_. If, however, you use a non-standard vendor-prefixed property, one that Autoprefixer would ignore and could not provide (such as `-webkit-touch-callout`), this rule will ignore it.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "property-whitelist": "# property-whitelist\n\n**_Deprecated: Instead use the [`property-allowed-list`](../property-allowed-list/README.md) rule._**\n\nSpecify a list of allowed properties.\n\n<!-- prettier-ignore -->\n```css\na { display: block; }\n/** ↑\n * This property */\n```\n\nThis rule ignores variables (`$sass`, `@less`, `--custom-property`).\n\n",
  "rule-empty-line-before": "# rule-empty-line-before\n\nRequire or disallow an empty line before rules.\n\n<!-- prettier-ignore -->\n```css\na {}\n      /* ← */\nb {}  /* ↑ */\n/**      ↑\n * This line */\n```\n\nThis rule ignores rules that are the very first node in a source.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule. We recommend to enable [`indentation`](../indentation/README.md) rule for better autofixing results with this rule.\n\n",
  "selector-attribute-brackets-space-inside": "# selector-attribute-brackets-space-inside\n\nRequire a single space or disallow whitespace on the inside of the brackets within attribute selectors.\n\n<!-- prettier-ignore -->\n```css\n    [ target=_blank ]\n/** ↑               ↑\n * The space inside these two brackets */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "selector-attribute-operator-allowed-list": "# selector-attribute-operator-allowed-list\n\nSpecify a list of allowed attribute operators.\n\n<!-- prettier-ignore -->\n```css\n[target=\"_blank\"] {}\n/**    ↑\n * This operator */\n```\n\n",
  "selector-attribute-operator-blacklist": "# selector-attribute-operator-blacklist\n\n**_Deprecated: Instead use the [`selector-attribute-operator-disallowed-list`](../selector-attribute-operator-disallowed-list/README.md) rule._**\n\nSpecify a list of disallowed attribute operators.\n\n<!-- prettier-ignore -->\n```css\n[target=\"_blank\"] {}\n/**    ↑\n * This operator */\n```\n\n",
  "selector-attribute-operator-disallowed-list": "# selector-attribute-operator-disallowed-list\n\nSpecify a list of disallowed attribute operators.\n\n<!-- prettier-ignore -->\n```css\n[target=\"_blank\"] {}\n/**    ↑\n * This operator */\n```\n\n",
  "selector-attribute-operator-space-after": "# selector-attribute-operator-space-after\n\nRequire a single space or disallow whitespace after operators within attribute selectors.\n\n<!-- prettier-ignore -->\n```css\n[target= _blank]\n/**    ↑\n * The space after operator */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "selector-attribute-operator-space-before": "# selector-attribute-operator-space-before\n\nRequire a single space or disallow whitespace before operators within attribute selectors.\n\n<!-- prettier-ignore -->\n```css\n[target =_blank]\n/**     ↑\n * The space before operator */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "selector-attribute-operator-whitelist": "# selector-attribute-operator-whitelist\n\n**_Deprecated: Instead use the [`selector-attribute-operator-allowed-list`](../selector-attribute-operator-allowed-list/README.md) rule._**\n\nSpecify a list of allowed attribute operators.\n\n<!-- prettier-ignore -->\n```css\n[target=\"_blank\"] {}\n/**    ↑\n * This operator */\n```\n\n",
  "selector-attribute-quotes": "# selector-attribute-quotes\n\nRequire or disallow quotes for attribute values.\n\n<!-- prettier-ignore -->\n```css\n[target=\"_blank\"] {}\n/**     ↑      ↑\n * These quotes */\n```\n\n",
  "selector-class-pattern": "# selector-class-pattern\n\nSpecify a pattern for class selectors.\n\n<!-- prettier-ignore -->\n```css\n    .foo, #bar.baz span, #hoo[disabled] { color: pink; }\n/** ↑         ↑\n * These class selectors */\n```\n\nThis rule ignores non-outputting Less mixin definitions and called Less mixins.\n\nEscaped selectors (e.g. `.u-size-11\\/12\\@sm`) are parsed as escaped twice (e.g. `.u-size-11\\\\/12\\\\@sm`). Your RegExp should account for that.\n\n",
  "selector-combinator-allowed-list": "# selector-combinator-allowed-list\n\nSpecify a list of allowed combinators.\n\n<!-- prettier-ignore -->\n```css\n  a + b {}\n/** ↑\n * This combinator */\n```\n\nThis rule normalizes the whitespace descendant combinator to be a single space.\n\nThis rule ignores [reference combinators](https://www.w3.org/TR/selectors4/#idref-combinators) e.g. `/for/`.\n\n",
  "selector-combinator-blacklist": "# selector-combinator-blacklist\n\n**_Deprecated: Instead use the [`selector-combinator-disallowed-list`](../selector-combinator-disallowed-list/README.md) rule._**\n\nSpecify a list of disallowed combinators.\n\n<!-- prettier-ignore -->\n```css\n  a + b {}\n/** ↑\n * This combinator */\n```\n\nThis rule normalizes the whitespace descendant combinator to be a single space.\n\nThis rule ignores [reference combinators](https://www.w3.org/TR/selectors4/#idref-combinators) e.g. `/for/`.\n\n",
  "selector-combinator-disallowed-list": "# selector-combinator-disallowed-list\n\nSpecify a list of disallowed combinators.\n\n<!-- prettier-ignore -->\n```css\n  a + b {}\n/** ↑\n * This combinator */\n```\n\nThis rule normalizes the whitespace descendant combinator to be a single space.\n\nThis rule ignores [reference combinators](https://www.w3.org/TR/selectors4/#idref-combinators) e.g. `/for/`.\n\n",
  "selector-combinator-space-after": "# selector-combinator-space-after\n\nRequire a single space or disallow whitespace after the combinators of selectors.\n\n<!-- prettier-ignore -->\n```css\n  a > b + c ~ d e >>> f { color: pink; }\n/** ↑   ↑   ↑  ↑  ↑\n * These are combinators */\n```\n\nCombinators are used to combine several different selectors into new and more specific ones. There are several types of combinators, including: child (`>`), adjacent sibling (`+`), general sibling (`~`), and descendant (which is represented by a blank space between two selectors).\n\nThe descendant combinator is _not_ checked by this rule.\n\nAlso, `+` and `-` signs within `:nth-*()` arguments are not checked (e.g. `a:nth-child(2n+1)`).\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "selector-combinator-space-before": "# selector-combinator-space-before\n\nRequire a single space or disallow whitespace before the combinators of selectors.\n\n<!-- prettier-ignore -->\n```css\n  a > b + c ~ d e >>> f { color: pink; }\n/** ↑   ↑   ↑  ↑  ↑\n * These are combinators */\n```\n\nCombinators are used to combine several different selectors into new and more specific ones. There are several types of combinators, including: child (`>`), adjacent sibling (`+`), general sibling (`~`), and descendant (which is represented by a blank space between two selectors).\n\nThe descendant combinator is _not_ checked by this rule.\n\nAlso, `+` and `-` signs within `:nth-*()` arguments are not checked (e.g. `a:nth-child(2n+1)`).\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "selector-combinator-whitelist": "# selector-combinator-whitelist\n\n**_Deprecated: Instead use the [`selector-combinator-allowed-list`](../selector-combinator-allowed-list/README.md) rule._**\n\nSpecify a list of allowed combinators.\n\n<!-- prettier-ignore -->\n```css\n  a + b {}\n/** ↑\n * This combinator */\n```\n\nThis rule normalizes the whitespace descendant combinator to be a single space.\n\nThis rule ignores [reference combinators](https://www.w3.org/TR/selectors4/#idref-combinators) e.g. `/for/`.\n\n",
  "selector-descendant-combinator-no-non-space": "# selector-descendant-combinator-no-non-space\n\nDisallow non-space characters for descendant combinators of selectors.\n\n<!-- prettier-ignore -->\n```css\n.foo .bar .baz {}\n/** ↑    ↑\n* These descendant combinators */\n```\n\nThis rule ensures that only a single space is used and ensures no tabs, newlines, nor multiple spaces are used for descendant combinators of selectors.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix most of the problems reported by this rule.\n\nThis rule currently ignores selectors containing comments.\n\n",
  "selector-id-pattern": "# selector-id-pattern\n\nSpecify a pattern for ID selectors.\n\n<!-- prettier-ignore -->\n```css\n.foo, #bar.baz a, #hoo[disabled] { color: pink; }\n/**   ↑           ↑\n * These ID selectors */\n```\n\n",
  "selector-list-comma-newline-after": "# selector-list-comma-newline-after\n\nRequire a newline or disallow whitespace after the commas of selector lists.\n\n<!-- prettier-ignore -->\n```css\n   a,\n   b↑{ color: pink; }\n/** ↑\n * The newline after this comma */\n```\n\nEnd-of-line comments are allowed one space after the comma.\n\n<!-- prettier-ignore -->\n```css\na, /* comment */\nb { color: pink; }\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "selector-list-comma-newline-before": "# selector-list-comma-newline-before\n\nRequire a newline or disallow whitespace before the commas of selector lists.\n\n<!-- prettier-ignore -->\n```css\n    a\n    , b { color: pink; }\n/** ↑\n * The newline before this comma */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "selector-list-comma-space-after": "# selector-list-comma-space-after\n\nRequire a single space or disallow whitespace after the commas of selector lists.\n\n<!-- prettier-ignore -->\n```css\n   a, b { color: pink; }\n/** ↑\n * The space after this comma */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "selector-list-comma-space-before": "# selector-list-comma-space-before\n\nRequire a single space or disallow whitespace before the commas of selector lists.\n\n<!-- prettier-ignore -->\n```css\n   a ,b { color: pink; }\n/**  ↑\n * The space before this comma */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "selector-max-attribute": "# selector-max-attribute\n\nLimit the number of attribute selectors in a selector.\n\n<!-- prettier-ignore -->\n```css\n    [rel=\"external\"] {}\n/** ↑\n * This type of selector */\n```\n\nThis rule resolves nested selectors before counting the number of attribute selectors. Each selector in a [selector list](https://www.w3.org/TR/selectors4/#selector-list) is evaluated separately.\n\nThe `:not()` pseudo-class is also evaluated separately. The rule processes the argument as if it were an independent selector, and the result does not count toward the total for the entire selector.\n\n",
  "selector-max-class": "# selector-max-class\n\nLimit the number of classes in a selector.\n\n<!-- prettier-ignore -->\n```css\ndiv .foo.bar[data-val] > a.baz {}\n/*  ↑   ↑                 ↑\n    ↑   ↑                 ↑\n    1   2                 3  -- this selector contains three classes */\n```\n\nThis rule resolves nested selectors before counting the number of classes in a selector. Each selector in a [selector list](https://www.w3.org/TR/selectors4/#selector-list) is evaluated separately.\n\nThe `:not()` pseudo-class is also evaluated separately. The rule processes the argument as if it were an independent selector, and the result does not count toward the total for the entire selector.\n\n",
  "selector-max-combinators": "# selector-max-combinators\n\nLimit the number of combinators in a selector.\n\n<!-- prettier-ignore -->\n```css\n  a > b + c ~ d e { color: pink; }\n/** ↑   ↑   ↑  ↑\n * These are combinators */\n```\n\nThis rule resolves nested selectors before counting the number of combinators selectors. Each selector in a [selector list](https://www.w3.org/TR/selectors4/#selector-list) is evaluated separately.\n\n",
  "selector-max-compound-selectors": "# selector-max-compound-selectors\n\nLimit the number of compound selectors in a selector.\n\n<!-- prettier-ignore -->\n```css\n   div .bar[data-val] > a.baz + .boom > #lorem {}\n/* ↑   ↑                ↑       ↑       ↑\n   ↑   ↑                ↑       ↑       ↑\n  Lv1 Lv2              Lv3     Lv4     Lv5  -- these are compound selectors */\n```\n\nA [compound selector](https://www.w3.org/TR/selectors4/#compound) is a chain of one or more simple (tag, class, ID, universal, attribute) selectors. If there is more than one compound selector in a complete selector, they will be separated by combinators (e.g. ``, `+`, `>`). One reason why you might want to limit the number of compound selectors is described in the [SMACSS book](http://smacss.com/book/applicability).\n\nThis rule resolves nested selectors before counting the depth of a selector. Each selector in a [selector list](https://www.w3.org/TR/selectors4/#selector-list) is evaluated separately.\n\n`:not()` is considered one compound selector irrespective to the complexity of the selector inside it. The rule _does_ process that inner selector, but does so separately, independent of the main selector.\n\n",
  "selector-max-empty-lines": "# selector-max-empty-lines\n\nLimit the number of adjacent empty lines within selectors.\n\n<!-- prettier-ignore -->\n```css\na,\n              /* ← */\nb {        /* ↑ */\n  color: red; /* ↑ */\n}             /* ↑ */\n/**              ↑\n *        This empty line */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "selector-max-id": "# selector-max-id\n\nLimit the number of ID selectors in a selector.\n\n<!-- prettier-ignore -->\n```css\n    #foo {}\n/** ↑\n * This type of selector */\n```\n\nThis rule resolves nested selectors before counting the number of ID selectors. Each selector in a [selector list](https://www.w3.org/TR/selectors4/#selector-list) is evaluated separately.\n\nThe `:not()` pseudo-class is also evaluated separately. The rule processes the argument as if it were an independent selector, and the result does not count toward the total for the entire selector.\n\n",
  "selector-max-pseudo-class": "# selector-max-pseudo-class\n\nLimit the number of pseudo-classes in a selector.\n\n<!-- prettier-ignore -->\n```css\n.foo .bar:first-child:hover {}\n/*       ↑           ↑\n         ↑           ↑\n         1           2 -- this selector contains two pseudo-classes */\n```\n\nThis rule resolves nested selectors before counting the number of pseudo-classes in a selector. Each selector in a [selector list](https://www.w3.org/TR/selectors4/#selector-list) is evaluated separately.\n\nThe content of the `:not()` pseudo-class is also evaluated separately. The rule processes the argument as if it were an independent selector, and the result does not count toward the total for the entire selector.\n\n",
  "selector-max-specificity": "# selector-max-specificity\n\nLimit the specificity of selectors.\n\n<!-- prettier-ignore -->\n```css\n    .foo, #bar.baz span, #hoo { color: pink; }\n/** ↑     ↑              ↑\n * Each of these selectors */\n```\n\nVisit the [Specificity Calculator](https://specificity.keegan.st) for visual representation of selector specificity.\n\nThis rule ignores selectors with variable interpolation (`#{$var}`, `@{var}`, `$(var)`).\n\nThis rule resolves nested selectors before counting the specificity of a selector. Each selector in a [selector list](https://www.w3.org/TR/selectors4/#selector-list) is evaluated separately.\n\n",
  "selector-max-type": "# selector-max-type\n\nLimit the number of type selectors in a selector.\n\n<!-- prettier-ignore -->\n```css\n    a {}\n/** ↑\n * This type of selector */\n```\n\nThis rule resolves nested selectors before counting the number of type selectors. Each selector in a [selector list](https://www.w3.org/TR/selectors4/#selector-list) is evaluated separately.\n\nThe `:not()` pseudo-class is also evaluated separately. The rule processes the argument as if it were an independent selector, and the result does not count toward the total for the entire selector.\n\n",
  "selector-max-universal": "# selector-max-universal\n\nLimit the number of universal selectors in a selector.\n\n<!-- prettier-ignore -->\n```css\n    * {}\n/** ↑\n * This universal selector */\n```\n\nThis rule resolves nested selectors before counting the number of universal selectors. Each selector in a [selector list](https://www.w3.org/TR/selectors4/#selector-list) is evaluated separately.\n\nThe logical combinations pseudo-class (e.g. `:not`, `:has`) is also evaluated separately. The rule processes the argument as if it were an independent selector, and the result does not count toward the total for the entire selector.\n\n",
  "selector-nested-pattern": "# selector-nested-pattern\n\nSpecify a pattern for the selectors of rules nested within rules.\n\n<!-- prettier-ignore -->\n```css\n    a {\n      color: orange;\n      &:hover { color: pink; }\n    } ↑\n/**   ↑\n * This nested selector */\n```\n\nNon-standard selectors (e.g. selectors with Sass or Less interpolation) and selectors of rules nested within at-rules are ignored.\n\n",
  "selector-no-qualifying-type": "# selector-no-qualifying-type\n\nDisallow qualifying a selector by type.\n\n<!-- prettier-ignore -->\n```css\n    a.foo {}\n/** ↑\n * This type selector is qualifying the class */\n```\n\nA type selector is \"qualifying\" when it is compounded with (chained to) another selector (e.g. `a.foo`, `a#foo`). This rule does not regulate type selectors that are combined with other selectors via a combinator (e.g. `a > .foo`, `a #foo`).\n\n",
  "selector-no-vendor-prefix": "# selector-no-vendor-prefix\n\nDisallow vendor prefixes for selectors.\n\n<!-- prettier-ignore -->\n```css\ninput::-moz-placeholder {}\n/**     ↑\n * This prefix */\n```\n\nThis rule does not blanketly condemn vendor prefixes. Instead, it uses [Autoprefixer's](https://github.com/postcss/autoprefixer) up-to-date data (from [caniuse.com](http://caniuse.com/)) to know whether a vendor prefix should cause a violation or not. _If you've included a vendor prefixed selector that has a standard alternative, one that Autoprefixer could take care of for you, this rule will complain about it_. If, however, you use a non-standard vendor-prefixed selector, one that Autoprefixer would ignore and could not provide, this rule will ignore it.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "selector-pseudo-class-allowed-list": "# selector-pseudo-class-allowed-list\n\nSpecify a list of allowed pseudo-class selectors.\n\n<!-- prettier-ignore -->\n```css\n  a:hover {}\n/** ↑\n * This pseudo-class selector */\n```\n\nThis rule ignores selectors that use variable interpolation e.g. `:#{$variable} {}`.\n\n",
  "selector-pseudo-class-blacklist": "# selector-pseudo-class-blacklist\n\n**_Deprecated: Instead use the [`selector-pseudo-class-disallowed-list`](../selector-pseudo-class-disallowed-list/README.md) rule._**\n\nSpecify a list of disallowed pseudo-class selectors.\n\n<!-- prettier-ignore -->\n```css\n  a:hover {}\n/** ↑\n * This pseudo-class selector */\n```\n\nThis rule ignores selectors that use variable interpolation e.g. `:#{$variable} {}`.\n\n",
  "selector-pseudo-class-case": "# selector-pseudo-class-case\n\nSpecify lowercase or uppercase for pseudo-class selectors.\n\n<!-- prettier-ignore -->\n```css\n  a:hover {}\n/** ↑\n * This pseudo-class selector */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "selector-pseudo-class-disallowed-list": "# selector-pseudo-class-disallowed-list\n\nSpecify a list of disallowed pseudo-class selectors.\n\n<!-- prettier-ignore -->\n```css\n  a:hover {}\n/** ↑\n * This pseudo-class selector */\n```\n\nThis rule ignores selectors that use variable interpolation e.g. `:#{$variable} {}`.\n\n",
  "selector-pseudo-class-no-unknown": "# selector-pseudo-class-no-unknown\n\nDisallow unknown pseudo-class selectors.\n\n<!-- prettier-ignore -->\n```css\n  a:hover {}\n/** ↑\n * This pseudo-class selector */\n```\n\nThis rule considers pseudo-class selectors defined in the CSS Specifications, up to and including Editor's Drafts, to be known.\n\nThis rule ignores vendor-prefixed pseudo-class selectors.\n\n",
  "selector-pseudo-class-parentheses-space-inside": "# selector-pseudo-class-parentheses-space-inside\n\nRequire a single space or disallow whitespace on the inside of the parentheses within pseudo-class selectors.\n\n<!-- prettier-ignore -->\n```css\ninput:not( [type=\"submit\"] ) {}\n/**      ↑                 ↑\n * The space inside these two parentheses */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix most of the problems reported by this rule. It won't fix pseudo elements containing comments.\n\n",
  "selector-pseudo-class-whitelist": "# selector-pseudo-class-whitelist\n\n**_Deprecated: Instead use the [`selector-pseudo-class-allowed-list`](../selector-pseudo-class-allowed-list/README.md) rule._**\n\nSpecify a list of allowed pseudo-class selectors.\n\n<!-- prettier-ignore -->\n```css\n  a:hover {}\n/** ↑\n * This pseudo-class selector */\n```\n\nThis rule ignores selectors that use variable interpolation e.g. `:#{$variable} {}`.\n\n",
  "selector-pseudo-element-allowed-list": "# selector-pseudo-element-allowed-list\n\nSpecify a list of allowed pseudo-element selectors.\n\n<!-- prettier-ignore -->\n```css\n  a::before {}\n/**  ↑\n * This pseudo-element selector */\n```\n\nThis rule ignores:\n\n- CSS2 pseudo-elements i.e. those prefixed with a single colon\n- selectors that use variable interpolation e.g. `::#{$variable} {}`\n\n",
  "selector-pseudo-element-blacklist": "# selector-pseudo-element-blacklist\n\n**_Deprecated: Instead use the [`selector-pseudo-element-disallowed-list`](../selector-pseudo-element-disallowed-list/README.md) rule._**\n\nSpecify a list of disallowed pseudo-element selectors.\n\n<!-- prettier-ignore -->\n```css\n  a::before {}\n/**  ↑\n * This pseudo-element selector */\n```\n\nThis rule ignores:\n\n- CSS2 pseudo-elements i.e. those prefixed with a single colon\n- selectors that use variable interpolation e.g. `::#{$variable} {}`\n\n",
  "selector-pseudo-element-case": "# selector-pseudo-element-case\n\nSpecify lowercase or uppercase for pseudo-element selectors.\n\n<!-- prettier-ignore -->\n```css\n  a::before {}\n/**  ↑\n * This pseudo-element selector */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "selector-pseudo-element-colon-notation": "# selector-pseudo-element-colon-notation\n\nSpecify single or double colon notation for applicable pseudo-elements.\n\n<!-- prettier-ignore -->\n```css\n    a::before {}\n/**  ↑\n * This notation */\n```\n\nThe `::` notation was chosen for _pseudo-elements_ to establish a discrimination between _pseudo-classes_ (which subclass existing elements) and _pseudo-elements_ (which are elements not represented in the document tree).\n\nHowever, for compatibility with existing style sheets, user agents also accept the previous one-colon notation for _pseudo-elements_ introduced in CSS levels 1 and 2 (namely, `:first-line`, `:first-letter`, `:before` and `:after`).\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "selector-pseudo-element-disallowed-list": "# selector-pseudo-element-disallowed-list\n\nSpecify a list of disallowed pseudo-element selectors.\n\n<!-- prettier-ignore -->\n```css\n  a::before {}\n/**  ↑\n * This pseudo-element selector */\n```\n\nThis rule ignores:\n\n- CSS2 pseudo-elements i.e. those prefixed with a single colon\n- selectors that use variable interpolation e.g. `::#{$variable} {}`\n\n",
  "selector-pseudo-element-no-unknown": "# selector-pseudo-element-no-unknown\n\nDisallow unknown pseudo-element selectors.\n\n<!-- prettier-ignore -->\n```css\n  a::before {}\n/**  ↑\n * This pseudo-element selector */\n```\n\nThis rule considers pseudo-element selectors defined in the CSS Specifications, up to and including Editor's Drafts, to be known.\n\nThis rule ignores vendor-prefixed pseudo-element selectors.\n\n",
  "selector-pseudo-element-whitelist": "# selector-pseudo-element-whitelist\n\n**_Deprecated: Instead use the [`selector-pseudo-element-allowed-list`](../selector-pseudo-element-allowed-list/README.md) rule._**\n\nSpecify a list of allowed pseudo-element selectors.\n\n<!-- prettier-ignore -->\n```css\n  a::before {}\n/**  ↑\n * This pseudo-element selector */\n```\n\nThis rule ignores:\n\n- CSS2 pseudo-elements i.e. those prefixed with a single colon\n- selectors that use variable interpolation e.g. `::#{$variable} {}`\n\n",
  "selector-type-case": "# selector-type-case\n\nSpecify lowercase or uppercase for type selectors.\n\n<!-- prettier-ignore -->\n```css\n    a {}\n/** ↑\n * This is type selector */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "selector-type-no-unknown": "# selector-type-no-unknown\n\nDisallow unknown type selectors.\n\n<!-- prettier-ignore -->\n```css\n    unknown {}\n/** ↑\n * This type selector */\n```\n\nThis rule considers tags defined in the HTML, SVG, and MathML specifications to be known.\n\n",
  "shorthand-property-no-redundant-values": "# shorthand-property-no-redundant-values\n\nDisallow redundant values in shorthand properties.\n\n<!-- prettier-ignore -->\n```css\na { margin: 1px 1px 1px 1px; }\n/**             ↑   ↑   ↑\n *           These values */\n```\n\nThis rule alerts you when you use redundant values in the following shorthand properties:\n\n- `margin`\n- `padding`\n- `border-color`\n- `border-radius`\n- `border-style`\n- `border-width`\n- `grid-gap`\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "string-no-newline": "# string-no-newline\n\nDisallow (unescaped) newlines in strings.\n\n<!-- prettier-ignore -->\n```css\na {\n  content: \"first\n    second\";     ↑\n}                ↑\n/**              ↑\n * The newline here */\n```\n\n[The spec](https://www.w3.org/TR/CSS2/syndata.html#strings) says this: \"A string cannot directly contain a newline. To include a newline in a string, use an escape representing the line feed character in ISO-10646 (U+000A), such as '\\A' or '\\00000a'.\" And also: \"It is possible to break strings over several lines, for aesthetic or other reasons, but in such a case the newline itself has to be escaped with a backslash (\\\\).\"\n\n",
  "string-quotes": "# string-quotes\n\nSpecify single or double quotes around strings.\n\n<!-- prettier-ignore -->\n```css\na[id=\"foo\"] { content: \"x\"; }\n/**  ↑   ↑             ↑ ↑\n * These quotes and these quotes */\n```\n\nQuotes within comments are ignored.\n\n<!-- prettier-ignore -->\n```css\n/* \"This is fine\" */\n/* 'And this is also fine' */\n```\n\nSingle quotes in a charset @-rule are ignored as using single quotes in this context is incorrect according the [CSS specification](https://www.w3.org/TR/CSS2/syndata.html#x57).\n\n<!-- prettier-ignore -->\n```css\n@charset \"utf-8\"\n/* fine regardless of configuration */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix most of the problems reported by this rule.\n\n",
  "time-min-milliseconds": "# time-min-milliseconds\n\nSpecify the minimum number of milliseconds for time values.\n\n<!-- prettier-ignore -->\n```css\na { animation: slip-n-slide 150ms linear; }\n/**                         ↑\n *                  This time */\n```\n\nThis rule checks positive numbers in `transition-duration`, `transition-delay`, `animation-duration`, `animation-delay`, and those times as they manifest in the `transition` and `animation` shorthands.\n\n",
  "unicode-bom": "# unicode-bom\n\nRequire or disallow the Unicode Byte Order Mark.\n\n",
  "unit-allowed-list": "# unit-allowed-list\n\nSpecify a list of allowed units.\n\n<!-- prettier-ignore -->\n```css\na { width: 100px; }\n/**           ↑\n *  These units */\n```\n\n",
  "unit-blacklist": "# unit-blacklist\n\n**_Deprecated: Instead use the [`unit-disallowed-list`](../unit-disallowed-list/README.md) rule._**\n\nSpecify a list of disallowed units.\n\n<!-- prettier-ignore -->\n```css\na { width: 100px; }\n/**           ↑\n *  These units */\n```\n\n",
  "unit-case": "# unit-case\n\nSpecify lowercase or uppercase for units.\n\n<!-- prettier-ignore -->\n```css\n    a { width: 10px; }\n/**              ↑\n *     These units */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix most of the problems reported by this rule.\n\n",
  "unit-disallowed-list": "# unit-disallowed-list\n\nSpecify a list of disallowed units.\n\n<!-- prettier-ignore -->\n```css\na { width: 100px; }\n/**           ↑\n *  These units */\n```\n\n",
  "unit-no-unknown": "# unit-no-unknown\n\nDisallow unknown units.\n\n<!-- prettier-ignore -->\n```css\na { width: 100pixels; }\n/**           ↑\n *  These units */\n```\n\nThis rule considers units defined in the CSS Specifications, up to and including Editor's Drafts, to be known.\n\n",
  "unit-whitelist": "# unit-whitelist\n\n**_Deprecated: Instead use the [`unit-allowed-list`](../unit-allowed-list/README.md) rule._**\n\nSpecify a list of allowed units.\n\n<!-- prettier-ignore -->\n```css\na { width: 100px; }\n/**           ↑\n *  These units */\n```\n\n",
  "value-keyword-case": "# value-keyword-case\n\nSpecify lowercase or uppercase for keywords values.\n\n<!-- prettier-ignore -->\n```css\n    a { display: block; }\n/**              ↑\n *    These values */\n```\n\nThis rule ignores [`<custom-idents>`](https://developer.mozilla.org/en/docs/Web/CSS/custom-ident) of known properties. Keyword values which are paired with non-properties (e.g. `$vars` and custom properties), and do not conform to the primary option, can be ignored using the `ignoreKeywords: []` secondary option.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "value-list-comma-newline-after": "# value-list-comma-newline-after\n\nRequire a newline or disallow whitespace after the commas of value lists.\n\n<!-- prettier-ignore -->\n```css\na { background-size: 0,\n      0; }            ↑\n/**                   ↑\n * The newline after this comma */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix most of the problems reported by this rule.\n\n",
  "value-list-comma-newline-before": "# value-list-comma-newline-before\n\nRequire a newline or disallow whitespace before the commas of value lists.\n\n<!-- prettier-ignore -->\n```css\n  a { background-size: 0\n    , 0; }\n/** ↑\n * The newline before this comma */\n```\n\n",
  "value-list-comma-space-after": "# value-list-comma-space-after\n\nRequire a single space or disallow whitespace after the commas of value lists.\n\n<!-- prettier-ignore -->\n```css\na { background-size: 0, 0; }\n/**                   ↑\n * The space after this comma */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix most of the problems reported by this rule.\n\n",
  "value-list-comma-space-before": "# value-list-comma-space-before\n\nRequire a single space or disallow whitespace before the commas of value lists.\n\n<!-- prettier-ignore -->\n```css\na { background-size: 0 ,0; }\n/**                    ↑\n * The space before this comma */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix most of the problems reported by this rule.\n\n",
  "value-list-max-empty-lines": "# value-list-max-empty-lines\n\nLimit the number of adjacent empty lines within value lists.\n\n<!-- prettier-ignore -->\n```css\na {\n  box-shadow:\n    inset 0 2px 0 #dcffa6,\n                    /* ← */\n    0 2px 5px #000; /* ↑ */\n}                   /* ↑ */\n/**                    ↑\n *       This empty line */\n```\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n",
  "value-no-vendor-prefix": "# value-no-vendor-prefix\n\nDisallow vendor prefixes for values.\n\n<!-- prettier-ignore -->\n```css\na { display: -webkit-flex; }\n/**          ↑\n *  These prefixes */\n```\n\nThis rule will only complain for prefixed _standard_ values, and not for prefixed _proprietary_ or _unknown_ ones.\n\nThe [`fix` option](../../../docs/user-guide/usage/options.md#fix) can automatically fix all of the problems reported by this rule.\n\n"
}
